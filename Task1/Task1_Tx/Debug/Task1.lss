
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c7  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072b  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000482  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d3  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:

 void ADC_init(){

 //Set reference voltage to be VCC, Left adjust ADC data, Choose PA1 as our analog input pin (ADC1)

 ADMUX |=(1<<REFS0)|  (1<<MUX0) | (1<<ADLAR) ;
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	81 66       	ori	r24, 0x61	; 97
  80:	87 b9       	out	0x07, r24	; 7

//Enable ADC, Set pre-scaler value to 64 ( frequency = F_CPU/128 = 62.5KHz )

ADCSRA |= (1<<ADEN) |(1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2)  ;
  82:	86 b1       	in	r24, 0x06	; 6
  84:	87 68       	ori	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
  88:	08 95       	ret

0000008a <ADC_read>:


 uint16_t ADC_read(){

 //Start conversion
ADCSRA |= (1<<ADSC);
  8a:	36 9a       	sbi	0x06, 6	; 6

 //wait for the conversion to be completed
 while(ADCSRA & (1<<ADSC));
  8c:	36 99       	sbic	0x06, 6	; 6
  8e:	fe cf       	rjmp	.-4      	; 0x8c <ADC_read+0x2>

 // Return received value
 return ADCH;
  90:	85 b1       	in	r24, 0x05	; 5


  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	08 95       	ret

00000096 <main>:
#include "ADC_lib.h"

int main(void)
{	
	
	ADC_init();									// Init ADC
  96:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>
	uart_init(9600);							// init uart transfer
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	95 e2       	ldi	r25, 0x25	; 37
  9e:	0e 94 78 00 	call	0xf0	; 0xf0 <uart_init>
// variables for LDR value and uart high/low bytes
	uint16_t LDR=0;
	char high_byte=0;
	char low_byte=0;

	DDRD |= (1<<PD5) | (1<<PD6);			// set pins pd5, pd6 as output for testing
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	80 66       	ori	r24, 0x60	; 96
  a6:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e3       	ldi	r18, 0x3F	; 63
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x18>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x22>
  b8:	00 00       	nop
    while (1) 
    {
	
	// Read LDR Value
	_delay_ms(1000);
	high_byte = ADC_read();
  ba:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_read>
  be:	c8 2f       	mov	r28, r24

	// Split the value and send over UART
	//high_byte = LDR>>8;
	//low_byte = LDR & 0XF0;
	uart_write(high_byte);
  c0:	0e 94 81 00 	call	0x102	; 0x102 <uart_write>
	//uart_write(low_byte);
	


	// Check LDR Value using LEDs
	if(high_byte<128){
  c4:	cc 23       	and	r28, r28
  c6:	14 f0       	brlt	.+4      	; 0xcc <main+0x36>
	PORTD |= (1<<PD5); 
  c8:	95 9a       	sbi	0x12, 5	; 18
  ca:	ee cf       	rjmp	.-36     	; 0xa8 <main+0x12>
	//PORTD &= ~(1<<PD6);
	//_delay_ms(1000);
	}
	else if (high_byte>128){
  cc:	c1 38       	cpi	r28, 0x81	; 129
  ce:	60 f3       	brcs	.-40     	; 0xa8 <main+0x12>
	//PORTD |= (1<<PD6);
	PORTD &=~(1<<PD5);
  d0:	95 98       	cbi	0x12, 5	; 18
  d2:	ea cf       	rjmp	.-44     	; 0xa8 <main+0x12>

000000d4 <baud_rate>:
 while ( !(UCSRA & (1<<RXC)) );

 //Return received value
 return UDR;

 }
  d4:	9c 01       	movw	r18, r24
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	72 e1       	ldi	r23, 0x12	; 18
  de:	8a e7       	ldi	r24, 0x7A	; 122
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 85 00 	call	0x10a	; 0x10a <__divmodsi4>
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	31 09       	sbc	r19, r1
  ea:	30 bd       	out	0x20, r19	; 32
  ec:	29 b9       	out	0x09, r18	; 9
  ee:	08 95       	ret

000000f0 <uart_init>:
  f0:	2a b1       	in	r18, 0x0a	; 10
  f2:	28 61       	ori	r18, 0x18	; 24
  f4:	2a b9       	out	0x0a, r18	; 10
  f6:	20 b5       	in	r18, 0x20	; 32
  f8:	2e 68       	ori	r18, 0x8E	; 142
  fa:	20 bd       	out	0x20, r18	; 32
  fc:	0e 94 6a 00 	call	0xd4	; 0xd4 <baud_rate>
 100:	08 95       	ret

00000102 <uart_write>:

 unsigned char uart_write(unsigned char send){


//Wait for empty transmit buffer
while ( !(UCSRA & (1<<UDRE) ) );
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <uart_write>

//Put data into buffer
UDR = send;
 106:	8c b9       	out	0x0c, r24	; 12


 }
 108:	08 95       	ret

0000010a <__divmodsi4>:
 10a:	05 2e       	mov	r0, r21
 10c:	97 fb       	bst	r25, 7
 10e:	1e f4       	brtc	.+6      	; 0x116 <__divmodsi4+0xc>
 110:	00 94       	com	r0
 112:	0e 94 9c 00 	call	0x138	; 0x138 <__negsi2>
 116:	57 fd       	sbrc	r21, 7
 118:	07 d0       	rcall	.+14     	; 0x128 <__divmodsi4_neg2>
 11a:	0e 94 a4 00 	call	0x148	; 0x148 <__udivmodsi4>
 11e:	07 fc       	sbrc	r0, 7
 120:	03 d0       	rcall	.+6      	; 0x128 <__divmodsi4_neg2>
 122:	4e f4       	brtc	.+18     	; 0x136 <__divmodsi4_exit>
 124:	0c 94 9c 00 	jmp	0x138	; 0x138 <__negsi2>

00000128 <__divmodsi4_neg2>:
 128:	50 95       	com	r21
 12a:	40 95       	com	r20
 12c:	30 95       	com	r19
 12e:	21 95       	neg	r18
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	4f 4f       	sbci	r20, 0xFF	; 255
 134:	5f 4f       	sbci	r21, 0xFF	; 255

00000136 <__divmodsi4_exit>:
 136:	08 95       	ret

00000138 <__negsi2>:
 138:	90 95       	com	r25
 13a:	80 95       	com	r24
 13c:	70 95       	com	r23
 13e:	61 95       	neg	r22
 140:	7f 4f       	sbci	r23, 0xFF	; 255
 142:	8f 4f       	sbci	r24, 0xFF	; 255
 144:	9f 4f       	sbci	r25, 0xFF	; 255
 146:	08 95       	ret

00000148 <__udivmodsi4>:
 148:	a1 e2       	ldi	r26, 0x21	; 33
 14a:	1a 2e       	mov	r1, r26
 14c:	aa 1b       	sub	r26, r26
 14e:	bb 1b       	sub	r27, r27
 150:	fd 01       	movw	r30, r26
 152:	0d c0       	rjmp	.+26     	; 0x16e <__udivmodsi4_ep>

00000154 <__udivmodsi4_loop>:
 154:	aa 1f       	adc	r26, r26
 156:	bb 1f       	adc	r27, r27
 158:	ee 1f       	adc	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	a2 17       	cp	r26, r18
 15e:	b3 07       	cpc	r27, r19
 160:	e4 07       	cpc	r30, r20
 162:	f5 07       	cpc	r31, r21
 164:	20 f0       	brcs	.+8      	; 0x16e <__udivmodsi4_ep>
 166:	a2 1b       	sub	r26, r18
 168:	b3 0b       	sbc	r27, r19
 16a:	e4 0b       	sbc	r30, r20
 16c:	f5 0b       	sbc	r31, r21

0000016e <__udivmodsi4_ep>:
 16e:	66 1f       	adc	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	88 1f       	adc	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	1a 94       	dec	r1
 178:	69 f7       	brne	.-38     	; 0x154 <__udivmodsi4_loop>
 17a:	60 95       	com	r22
 17c:	70 95       	com	r23
 17e:	80 95       	com	r24
 180:	90 95       	com	r25
 182:	9b 01       	movw	r18, r22
 184:	ac 01       	movw	r20, r24
 186:	bd 01       	movw	r22, r26
 188:	cf 01       	movw	r24, r30
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
