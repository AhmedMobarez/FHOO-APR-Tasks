
Task1_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000018a8  0000193c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800078  00800078  00001954  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002252  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c59  00000000  00000000  00003dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001050  00000000  00000000  00004a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  00005a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000698  00000000  00000000  00005fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cb9  00000000  00000000  00006680  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__ctors_end>
       4:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
       8:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
       c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      10:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      14:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      18:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      1c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      20:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      24:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      28:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      2c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      30:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      34:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__vector_13>
      38:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      3c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      40:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      44:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      48:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      4c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>
      50:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <lcd_putc+0x46>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <wait_while_chip_is_busy+0x28>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <g_VLine>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <font5x8+0x2a>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <font5x8+0x6c>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <font5x8>:
     14e:	00 00 05 08 20 5f 05 05 05 05 05 05 05 05 05 05     .... _..........
     15e:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     16e:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     17e:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     18e:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     19e:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     1ae:	05 05 05 05 05 00 00 00 00 00 00 00 5f 00 00 00     ............_...
     1be:	07 00 07 00 14 7f 14 7f 14 24 2a 7f 2a 12 23 13     .........$*.*.#.
     1ce:	08 64 62 36 49 55 22 50 00 05 03 00 00 00 1c 22     .db6IU"P......."
     1de:	41 00 00 41 22 1c 00 08 2a 1c 2a 08 08 08 3e 08     A..A"...*.*...>.
     1ee:	08 00 50 30 00 00 08 08 08 08 08 00 30 30 00 00     ..P0........00..
     1fe:	20 10 08 04 02 3e 51 49 45 3e 00 42 7f 40 00 42      ....>QIE>.B.@.B
     20e:	61 51 49 46 21 41 45 4b 31 18 14 12 7f 10 27 45     aQIF!AEK1.....'E
     21e:	45 45 39 3c 4a 49 49 30 01 71 09 05 03 36 49 49     EE9<JII0.q...6II
     22e:	49 36 06 49 49 29 1e 00 36 36 00 00 00 56 36 00     I6.II)..66...V6.
     23e:	00 00 08 14 22 41 14 14 14 14 14 41 22 14 08 00     ...."A.....A"...
     24e:	02 01 51 09 06 32 49 79 41 3e 7e 11 11 11 7e 7f     ..Q..2IyA>~...~.
     25e:	49 49 49 36 3e 41 41 41 22 7f 41 41 22 1c 7f 49     III6>AAA".AA"..I
     26e:	49 49 41 7f 09 09 01 01 3e 41 41 51 32 7f 08 08     IIA.....>AAQ2...
     27e:	08 7f 00 41 7f 41 00 20 40 41 3f 01 7f 08 14 22     ...A.A. @A?...."
     28e:	41 7f 40 40 40 40 7f 02 04 02 7f 7f 04 08 10 7f     A.@@@@..........
     29e:	3e 41 41 41 3e 7f 09 09 09 06 3e 41 51 21 5e 7f     >AAA>.....>AQ!^.
     2ae:	09 19 29 46 46 49 49 49 31 01 01 7f 01 01 3f 40     ..)FFIII1.....?@
     2be:	40 40 3f 1f 20 40 20 1f 7f 20 18 20 7f 63 14 08     @@?. @ .. . .c..
     2ce:	14 63 03 04 78 04 03 61 51 49 45 43 00 00 7f 41     .c..x..aQIEC...A
     2de:	41 02 04 08 10 20 41 41 7f 00 00 04 02 01 02 04     A.... AA........
     2ee:	40 40 40 40 40 00 01 02 04 00 20 54 54 54 78 7f     @@@@@..... TTTx.
     2fe:	48 44 44 38 38 44 44 44 20 38 44 44 48 7f 38 54     HDD88DDD 8DDH.8T
     30e:	54 54 18 08 7e 09 01 02 08 14 54 54 3c 7f 08 04     TT..~.....TT<...
     31e:	04 78 00 44 7d 40 00 20 40 44 3d 00 00 7f 10 28     .x.D}@. @D=....(
     32e:	44 00 41 7f 40 00 7c 04 18 04 78 7c 08 04 04 78     D.A.@.|...x|...x
     33e:	38 44 44 44 38 7c 14 14 14 08 08 14 14 18 7c 7c     8DDD8|........||
     34e:	08 04 04 08 48 54 54 54 20 04 3f 44 40 20 3c 40     ....HTTT .?D@ <@
     35e:	40 20 7c 1c 20 40 20 1c 3c 40 30 40 3c 44 28 10     @ |. @ .<@0@<D(.
     36e:	28 44 0c 50 50 50 3c 44 64 54 4c 44 00 08 36 41     (D.PPP<DdTLD..6A
     37e:	00 00 00 7f 00 00 00 41 36 08 00 00 02 01 02 01     .......A6.......

0000038e <__ctors_end>:
     38e:	11 24       	eor	r1, r1
     390:	1f be       	out	0x3f, r1	; 63
     392:	cf e5       	ldi	r28, 0x5F	; 95
     394:	d8 e0       	ldi	r29, 0x08	; 8
     396:	de bf       	out	0x3e, r29	; 62
     398:	cd bf       	out	0x3d, r28	; 61

0000039a <__do_copy_data>:
     39a:	10 e0       	ldi	r17, 0x00	; 0
     39c:	a0 e6       	ldi	r26, 0x60	; 96
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	e8 ea       	ldi	r30, 0xA8	; 168
     3a2:	f8 e1       	ldi	r31, 0x18	; 24
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <__do_copy_data+0x10>
     3a6:	05 90       	lpm	r0, Z+
     3a8:	0d 92       	st	X+, r0
     3aa:	a8 37       	cpi	r26, 0x78	; 120
     3ac:	b1 07       	cpc	r27, r17
     3ae:	d9 f7       	brne	.-10     	; 0x3a6 <__do_copy_data+0xc>

000003b0 <__do_clear_bss>:
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	a8 e7       	ldi	r26, 0x78	; 120
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <.do_clear_bss_start>

000003b8 <.do_clear_bss_loop>:
     3b8:	1d 92       	st	X+, r1

000003ba <.do_clear_bss_start>:
     3ba:	aa 38       	cpi	r26, 0x8A	; 138
     3bc:	b2 07       	cpc	r27, r18
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <.do_clear_bss_loop>
     3c0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <main>
     3c4:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <_exit>

000003c8 <__bad_interrupt>:
     3c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003cc <g_VLine>:
{
  g_HLine(x, y, width,Color);
  g_VLine(x, y, height,Color);
  g_VLine(x+width-1, y, height-1,Color);
  g_HLine(x+1, y+height-1, width-1,Color);
}
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	f8 2e       	mov	r15, r24
     3d8:	c6 2f       	mov	r28, r22
     3da:	d2 2f       	mov	r29, r18
     3dc:	86 2f       	mov	r24, r22
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	8c 01       	movw	r16, r24
     3e2:	04 0f       	add	r16, r20
     3e4:	11 1d       	adc	r17, r1
     3e6:	80 17       	cp	r24, r16
     3e8:	91 07       	cpc	r25, r17
     3ea:	5c f4       	brge	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3ec:	4d 2f       	mov	r20, r29
     3ee:	6c 2f       	mov	r22, r28
     3f0:	8f 2d       	mov	r24, r15
     3f2:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>
     3f6:	cf 5f       	subi	r28, 0xFF	; 255
     3f8:	8c 2f       	mov	r24, r28
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	80 17       	cp	r24, r16
     3fe:	91 07       	cpc	r25, r17
     400:	ac f3       	brlt	.-22     	; 0x3ec <g_VLine+0x20>
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	08 95       	ret

0000040e <g_Interp1>:

void g_Interp1(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t Color)
{
     40e:	3f 92       	push	r3
     410:	4f 92       	push	r4
     412:	5f 92       	push	r5
     414:	6f 92       	push	r6
     416:	7f 92       	push	r7
     418:	8f 92       	push	r8
     41a:	9f 92       	push	r9
     41c:	af 92       	push	r10
     41e:	bf 92       	push	r11
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	2a 97       	sbiw	r28, 0x0a	; 10
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	8a 87       	std	Y+10, r24	; 0x0a
     442:	69 87       	std	Y+9, r22	; 0x09
     444:	34 2e       	mov	r3, r20
     446:	12 2f       	mov	r17, r18
  float k,d;
  uint8_t x,y;
  
  if (x1==x2)
     448:	84 13       	cpse	r24, r20
     44a:	18 c0       	rjmp	.+48     	; 0x47c <g_Interp1+0x6e>
    if (y2>y1)
     44c:	62 17       	cp	r22, r18
     44e:	58 f4       	brcc	.+22     	; 0x466 <g_Interp1+0x58>
      for (y=y1;y<=y2;y++)
		lcd_set_pixel(x1, y, Color);
     450:	40 2f       	mov	r20, r16
     452:	69 85       	ldd	r22, Y+9	; 0x09
     454:	8a 85       	ldd	r24, Y+10	; 0x0a
     456:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>
  float k,d;
  uint8_t x,y;
  
  if (x1==x2)
    if (y2>y1)
      for (y=y1;y<=y2;y++)
     45a:	29 85       	ldd	r18, Y+9	; 0x09
     45c:	2f 5f       	subi	r18, 0xFF	; 255
     45e:	29 87       	std	Y+9, r18	; 0x09
     460:	12 17       	cp	r17, r18
     462:	b0 f7       	brcc	.-20     	; 0x450 <g_Interp1+0x42>
     464:	da c0       	rjmp	.+436    	; 0x61a <g_Interp1+0x20c>
		lcd_set_pixel(x1, y, Color);
    else
      for (y=y1;y>=y2;y--)
		lcd_set_pixel(x1, y, Color);
     466:	40 2f       	mov	r20, r16
     468:	69 85       	ldd	r22, Y+9	; 0x09
     46a:	8a 85       	ldd	r24, Y+10	; 0x0a
     46c:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>
  if (x1==x2)
    if (y2>y1)
      for (y=y1;y<=y2;y++)
		lcd_set_pixel(x1, y, Color);
    else
      for (y=y1;y>=y2;y--)
     470:	89 85       	ldd	r24, Y+9	; 0x09
     472:	81 50       	subi	r24, 0x01	; 1
     474:	89 87       	std	Y+9, r24	; 0x09
     476:	81 17       	cp	r24, r17
     478:	b0 f7       	brcc	.-20     	; 0x466 <g_Interp1+0x58>
     47a:	cf c0       	rjmp	.+414    	; 0x61a <g_Interp1+0x20c>
		lcd_set_pixel(x1, y, Color);
  else
  {
    k=(float) (y2-y1)/(x2-x1);
     47c:	62 2f       	mov	r22, r18
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	29 85       	ldd	r18, Y+9	; 0x09
     482:	62 1b       	sub	r22, r18
     484:	71 09       	sbc	r23, r1
     486:	07 2e       	mov	r0, r23
     488:	00 0c       	add	r0, r0
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     492:	69 83       	std	Y+1, r22	; 0x01
     494:	7a 83       	std	Y+2, r23	; 0x02
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	9c 83       	std	Y+4, r25	; 0x04
     49a:	2a 85       	ldd	r18, Y+10	; 0x0a
     49c:	82 2f       	mov	r24, r18
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	63 2d       	mov	r22, r3
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	7c 01       	movw	r14, r24
     4a6:	6e 19       	sub	r22, r14
     4a8:	7f 09       	sbc	r23, r15
     4aa:	07 2e       	mov	r0, r23
     4ac:	00 0c       	add	r0, r0
     4ae:	88 0b       	sbc	r24, r24
     4b0:	99 0b       	sbc	r25, r25
     4b2:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     4b6:	2b 01       	movw	r4, r22
     4b8:	3c 01       	movw	r6, r24
     4ba:	9b 01       	movw	r18, r22
     4bc:	ac 01       	movw	r20, r24
     4be:	69 81       	ldd	r22, Y+1	; 0x01
     4c0:	7a 81       	ldd	r23, Y+2	; 0x02
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     4ca:	4b 01       	movw	r8, r22
     4cc:	5c 01       	movw	r10, r24
	d=(float) y1-k*x1;
     4ce:	29 85       	ldd	r18, Y+9	; 0x09
     4d0:	62 2f       	mov	r22, r18
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__floatunsisf>
     4dc:	6d 83       	std	Y+5, r22	; 0x05
     4de:	7e 83       	std	Y+6, r23	; 0x06
     4e0:	8f 83       	std	Y+7, r24	; 0x07
     4e2:	98 87       	std	Y+8, r25	; 0x08
     4e4:	b7 01       	movw	r22, r14
     4e6:	ff 0c       	add	r15, r15
     4e8:	88 0b       	sbc	r24, r24
     4ea:	99 0b       	sbc	r25, r25
     4ec:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     4f0:	a5 01       	movw	r20, r10
     4f2:	94 01       	movw	r18, r8
     4f4:	0e 94 a6 08 	call	0x114c	; 0x114c <__mulsf3>
     4f8:	9b 01       	movw	r18, r22
     4fa:	ac 01       	movw	r20, r24
     4fc:	6d 81       	ldd	r22, Y+5	; 0x05
     4fe:	7e 81       	ldd	r23, Y+6	; 0x06
     500:	8f 81       	ldd	r24, Y+7	; 0x07
     502:	98 85       	ldd	r25, Y+8	; 0x08
     504:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__subsf3>
     508:	6b 01       	movw	r12, r22
     50a:	7c 01       	movw	r14, r24


	if (fabs((int) y2-y1)<=fabs((int) x2-x1))
     50c:	69 81       	ldd	r22, Y+1	; 0x01
     50e:	7a 81       	ldd	r23, Y+2	; 0x02
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	9f 77       	andi	r25, 0x7F	; 127
     516:	a3 01       	movw	r20, r6
     518:	92 01       	movw	r18, r4
     51a:	5f 77       	andi	r21, 0x7F	; 127
     51c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__cmpsf2>
     520:	18 16       	cp	r1, r24
     522:	ec f1       	brlt	.+122    	; 0x59e <g_Interp1+0x190>
    {
      if (x1<x2)
     524:	8a 85       	ldd	r24, Y+10	; 0x0a
     526:	83 15       	cp	r24, r3
     528:	e8 f4       	brcc	.+58     	; 0x564 <g_Interp1+0x156>
        for (x=x1;x<=x2;x++)
        {
          y=round(k*x+d);
     52a:	2a 85       	ldd	r18, Y+10	; 0x0a
     52c:	62 2f       	mov	r22, r18
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     538:	a5 01       	movw	r20, r10
     53a:	94 01       	movw	r18, r8
     53c:	0e 94 a6 08 	call	0x114c	; 0x114c <__mulsf3>
     540:	a7 01       	movw	r20, r14
     542:	96 01       	movw	r18, r12
     544:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__addsf3>
     548:	0e 94 13 09 	call	0x1226	; 0x1226 <round>
		  lcd_set_pixel(x, y, Color);
     54c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixunssfsi>
     550:	40 2f       	mov	r20, r16
     552:	8a 85       	ldd	r24, Y+10	; 0x0a
     554:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>


	if (fabs((int) y2-y1)<=fabs((int) x2-x1))
    {
      if (x1<x2)
        for (x=x1;x<=x2;x++)
     558:	8a 85       	ldd	r24, Y+10	; 0x0a
     55a:	8f 5f       	subi	r24, 0xFF	; 255
     55c:	8a 87       	std	Y+10, r24	; 0x0a
     55e:	38 16       	cp	r3, r24
     560:	20 f7       	brcc	.-56     	; 0x52a <g_Interp1+0x11c>
     562:	5b c0       	rjmp	.+182    	; 0x61a <g_Interp1+0x20c>
        }
      else
	  {
        for (x=x1;x>=x2;x--)
        {
          y=round(k*x+d);
     564:	2a 85       	ldd	r18, Y+10	; 0x0a
     566:	62 2f       	mov	r22, r18
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     572:	a5 01       	movw	r20, r10
     574:	94 01       	movw	r18, r8
     576:	0e 94 a6 08 	call	0x114c	; 0x114c <__mulsf3>
     57a:	a7 01       	movw	r20, r14
     57c:	96 01       	movw	r18, r12
     57e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__addsf3>
     582:	0e 94 13 09 	call	0x1226	; 0x1226 <round>
		  lcd_set_pixel(x, y, Color);
     586:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixunssfsi>
     58a:	40 2f       	mov	r20, r16
     58c:	8a 85       	ldd	r24, Y+10	; 0x0a
     58e:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>
          y=round(k*x+d);
		  lcd_set_pixel(x, y, Color);
        }
      else
	  {
        for (x=x1;x>=x2;x--)
     592:	8a 85       	ldd	r24, Y+10	; 0x0a
     594:	81 50       	subi	r24, 0x01	; 1
     596:	8a 87       	std	Y+10, r24	; 0x0a
     598:	83 15       	cp	r24, r3
     59a:	20 f7       	brcc	.-56     	; 0x564 <g_Interp1+0x156>
     59c:	3e c0       	rjmp	.+124    	; 0x61a <g_Interp1+0x20c>
        }
      }
    }
	else
    {
      if (y1<y2)
     59e:	29 85       	ldd	r18, Y+9	; 0x09
     5a0:	21 17       	cp	r18, r17
     5a2:	f0 f4       	brcc	.+60     	; 0x5e0 <g_Interp1+0x1d2>
        for (y=y1;y<=y2;y++)
        {
          x=round((y-d)/k);
     5a4:	29 85       	ldd	r18, Y+9	; 0x09
     5a6:	62 2f       	mov	r22, r18
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     5b2:	a7 01       	movw	r20, r14
     5b4:	96 01       	movw	r18, r12
     5b6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__subsf3>
     5ba:	a5 01       	movw	r20, r10
     5bc:	94 01       	movw	r18, r8
     5be:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     5c2:	0e 94 13 09 	call	0x1226	; 0x1226 <round>
		  lcd_set_pixel(x, y, Color);
     5c6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixunssfsi>
     5ca:	86 2f       	mov	r24, r22
     5cc:	40 2f       	mov	r20, r16
     5ce:	69 85       	ldd	r22, Y+9	; 0x09
     5d0:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>
      }
    }
	else
    {
      if (y1<y2)
        for (y=y1;y<=y2;y++)
     5d4:	89 85       	ldd	r24, Y+9	; 0x09
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	89 87       	std	Y+9, r24	; 0x09
     5da:	18 17       	cp	r17, r24
     5dc:	18 f7       	brcc	.-58     	; 0x5a4 <g_Interp1+0x196>
     5de:	1d c0       	rjmp	.+58     	; 0x61a <g_Interp1+0x20c>
        }
      else
	  {
        for (y=y1;y>=y2;y--)
        {
          x=round((y-d)/k);
     5e0:	29 85       	ldd	r18, Y+9	; 0x09
     5e2:	62 2f       	mov	r22, r18
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     5ee:	a7 01       	movw	r20, r14
     5f0:	96 01       	movw	r18, r12
     5f2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__subsf3>
     5f6:	a5 01       	movw	r20, r10
     5f8:	94 01       	movw	r18, r8
     5fa:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     5fe:	0e 94 13 09 	call	0x1226	; 0x1226 <round>
		  lcd_set_pixel(x, y, Color);
     602:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixunssfsi>
     606:	86 2f       	mov	r24, r22
     608:	40 2f       	mov	r20, r16
     60a:	69 85       	ldd	r22, Y+9	; 0x09
     60c:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>
          x=round((y-d)/k);
		  lcd_set_pixel(x, y, Color);
        }
      else
	  {
        for (y=y1;y>=y2;y--)
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	81 50       	subi	r24, 0x01	; 1
     614:	89 87       	std	Y+9, r24	; 0x09
     616:	81 17       	cp	r24, r17
     618:	18 f7       	brcc	.-58     	; 0x5e0 <g_Interp1+0x1d2>
		  lcd_set_pixel(x, y, Color);
        }
      }
    }
  }
}
     61a:	2a 96       	adiw	r28, 0x0a	; 10
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	bf 90       	pop	r11
     638:	af 90       	pop	r10
     63a:	9f 90       	pop	r9
     63c:	8f 90       	pop	r8
     63e:	7f 90       	pop	r7
     640:	6f 90       	pop	r6
     642:	5f 90       	pop	r5
     644:	4f 90       	pop	r4
     646:	3f 90       	pop	r3
     648:	08 95       	ret

0000064a <lcd_chip_select>:
// get height of font
// ---------------------------------
uint8_t font_char_height(const uint8_t*font)
{
  return(pgm_read_byte(font+3)); // return the first used char of the font
}
     64a:	83 30       	cpi	r24, 0x03	; 3
     64c:	21 f4       	brne	.+8      	; 0x656 <lcd_chip_select+0xc>
     64e:	85 b3       	in	r24, 0x15	; 21
     650:	80 66       	ori	r24, 0x60	; 96
     652:	85 bb       	out	0x15, r24	; 21
     654:	08 95       	ret
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	19 f4       	brne	.+6      	; 0x660 <lcd_chip_select+0x16>
     65a:	ae 98       	cbi	0x15, 6	; 21
     65c:	ad 9a       	sbi	0x15, 5	; 21
     65e:	08 95       	ret
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	19 f4       	brne	.+6      	; 0x66a <lcd_chip_select+0x20>
     664:	ad 98       	cbi	0x15, 5	; 21
     666:	ae 9a       	sbi	0x15, 6	; 21
     668:	08 95       	ret
     66a:	85 b3       	in	r24, 0x15	; 21
     66c:	8f 79       	andi	r24, 0x9F	; 159
     66e:	85 bb       	out	0x15, r24	; 21
     670:	08 95       	ret

00000672 <wait_while_chip_is_busy>:
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	8a bb       	out	0x1a, r24	; 26
     676:	8b bb       	out	0x1b, r24	; 27
     678:	1a ba       	out	0x1a, r1	; 26
     67a:	aa 98       	cbi	0x15, 2	; 21
     67c:	85 b3       	in	r24, 0x15	; 21
     67e:	88 61       	ori	r24, 0x18	; 24
     680:	85 bb       	out	0x15, r24	; 21
     682:	00 00       	nop
     684:	cf 9b       	sbis	0x19, 7	; 25
     686:	06 c0       	rjmp	.+12     	; 0x694 <wait_while_chip_is_busy+0x22>
     688:	ac 98       	cbi	0x15, 4	; 21
     68a:	00 00       	nop
     68c:	ac 9a       	sbi	0x15, 4	; 21
     68e:	00 00       	nop
     690:	cf 99       	sbic	0x19, 7	; 25
     692:	fa cf       	rjmp	.-12     	; 0x688 <wait_while_chip_is_busy+0x16>
     694:	85 b3       	in	r24, 0x15	; 21
     696:	87 7e       	andi	r24, 0xE7	; 231
     698:	85 bb       	out	0x15, r24	; 21
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	8a bb       	out	0x1a, r24	; 26
     69e:	08 95       	ret

000006a0 <lcd_write>:
     6a0:	9f ef       	ldi	r25, 0xFF	; 255
     6a2:	9a bb       	out	0x1a, r25	; 26
     6a4:	8b bb       	out	0x1b, r24	; 27
     6a6:	ac 9a       	sbi	0x15, 4	; 21
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <lcd_write+0xa>
     6aa:	ac 98       	cbi	0x15, 4	; 21
     6ac:	63 30       	cpi	r22, 0x03	; 3
     6ae:	71 f4       	brne	.+28     	; 0x6cc <lcd_write+0x2c>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 25 03 	call	0x64a	; 0x64a <lcd_chip_select>
     6b6:	0e 94 39 03 	call	0x672	; 0x672 <wait_while_chip_is_busy>
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 25 03 	call	0x64a	; 0x64a <lcd_chip_select>
     6c0:	0e 94 39 03 	call	0x672	; 0x672 <wait_while_chip_is_busy>
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	0e 94 25 03 	call	0x64a	; 0x64a <lcd_chip_select>
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <lcd_write+0x30>
     6cc:	0e 94 39 03 	call	0x672	; 0x672 <wait_while_chip_is_busy>
     6d0:	1b ba       	out	0x1b, r1	; 27
     6d2:	08 95       	ret

000006d4 <lcd_write_cmd>:
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	d8 2f       	mov	r29, r24
     6da:	c6 2f       	mov	r28, r22
     6dc:	86 2f       	mov	r24, r22
     6de:	0e 94 25 03 	call	0x64a	; 0x64a <lcd_chip_select>
     6e2:	85 b3       	in	r24, 0x15	; 21
     6e4:	83 7f       	andi	r24, 0xF3	; 243
     6e6:	85 bb       	out	0x15, r24	; 21
     6e8:	6c 2f       	mov	r22, r28
     6ea:	8d 2f       	mov	r24, r29
     6ec:	0e 94 50 03 	call	0x6a0	; 0x6a0 <lcd_write>
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <lcd_write_data>:
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	c8 2f       	mov	r28, r24
     6fc:	d6 2f       	mov	r29, r22
     6fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     702:	81 11       	cpse	r24, r1
     704:	c0 95       	com	r28
     706:	8d 2f       	mov	r24, r29
     708:	0e 94 25 03 	call	0x64a	; 0x64a <lcd_chip_select>
     70c:	aa 9a       	sbi	0x15, 2	; 21
     70e:	ab 98       	cbi	0x15, 3	; 21
     710:	6d 2f       	mov	r22, r29
     712:	8c 2f       	mov	r24, r28
     714:	0e 94 50 03 	call	0x6a0	; 0x6a0 <lcd_write>
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <lcd_read_data>:
     71e:	cf 93       	push	r28
     720:	0e 94 25 03 	call	0x64a	; 0x64a <lcd_chip_select>
     724:	0e 94 39 03 	call	0x672	; 0x672 <wait_while_chip_is_busy>
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	8a bb       	out	0x1a, r24	; 26
     72c:	8b bb       	out	0x1b, r24	; 27
     72e:	1a ba       	out	0x1a, r1	; 26
     730:	85 b3       	in	r24, 0x15	; 21
     732:	8c 60       	ori	r24, 0x0C	; 12
     734:	85 bb       	out	0x15, r24	; 21
     736:	ac 9a       	sbi	0x15, 4	; 21
     738:	00 c0       	rjmp	.+0      	; 0x73a <lcd_read_data+0x1c>
     73a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     73e:	88 23       	and	r24, r24
     740:	19 f0       	breq	.+6      	; 0x748 <lcd_read_data+0x2a>
     742:	c9 b3       	in	r28, 0x19	; 25
     744:	c0 95       	com	r28
     746:	01 c0       	rjmp	.+2      	; 0x74a <lcd_read_data+0x2c>
     748:	c9 b3       	in	r28, 0x19	; 25
     74a:	ac 98       	cbi	0x15, 4	; 21
     74c:	0e 94 39 03 	call	0x672	; 0x672 <wait_while_chip_is_busy>
     750:	8c 2f       	mov	r24, r28
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <lcd_init>:
     756:	84 b3       	in	r24, 0x14	; 20
     758:	8c 6f       	ori	r24, 0xFC	; 252
     75a:	84 bb       	out	0x14, r24	; 20
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	0e 94 25 03 	call	0x64a	; 0x64a <lcd_chip_select>
     762:	af 98       	cbi	0x15, 7	; 21
     764:	8b e4       	ldi	r24, 0x4B	; 75
     766:	9d e1       	ldi	r25, 0x1D	; 29
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <lcd_init+0x12>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <lcd_init+0x18>
     76e:	00 00       	nop
     770:	af 9a       	sbi	0x15, 7	; 21
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	8f e3       	ldi	r24, 0x3F	; 63
     776:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	80 ec       	ldi	r24, 0xC0	; 192
     77e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     782:	63 e0       	ldi	r22, 0x03	; 3
     784:	80 e4       	ldi	r24, 0x40	; 64
     786:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	88 eb       	ldi	r24, 0xB8	; 184
     78e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     792:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <cursor_x>
     796:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <cursor_y>
     79a:	08 95       	ret

0000079c <lcd_clear>:
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	d0 e0       	ldi	r29, 0x00	; 0
     7a2:	63 e0       	ldi	r22, 0x03	; 3
     7a4:	8d 2f       	mov	r24, r29
     7a6:	88 6b       	ori	r24, 0xB8	; 184
     7a8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     7ac:	63 e0       	ldi	r22, 0x03	; 3
     7ae:	80 e4       	ldi	r24, 0x40	; 64
     7b0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     7b4:	c0 e4       	ldi	r28, 0x40	; 64
     7b6:	63 e0       	ldi	r22, 0x03	; 3
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <lcd_write_data>
     7be:	c1 50       	subi	r28, 0x01	; 1
     7c0:	d1 f7       	brne	.-12     	; 0x7b6 <lcd_clear+0x1a>
     7c2:	df 5f       	subi	r29, 0xFF	; 255
     7c4:	d8 30       	cpi	r29, 0x08	; 8
     7c6:	69 f7       	brne	.-38     	; 0x7a2 <lcd_clear+0x6>
     7c8:	63 e0       	ldi	r22, 0x03	; 3
     7ca:	80 e4       	ldi	r24, 0x40	; 64
     7cc:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     7d0:	63 e0       	ldi	r22, 0x03	; 3
     7d2:	88 eb       	ldi	r24, 0xB8	; 184
     7d4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <lcd_set_pixel>:
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	c8 2f       	mov	r28, r24
     7ea:	16 2f       	mov	r17, r22
     7ec:	f4 2e       	mov	r15, r20
     7ee:	88 23       	and	r24, r24
     7f0:	0c f4       	brge	.+2      	; 0x7f4 <lcd_set_pixel+0x16>
     7f2:	42 c0       	rjmp	.+132    	; 0x878 <__stack+0x19>
     7f4:	60 34       	cpi	r22, 0x40	; 64
     7f6:	08 f0       	brcs	.+2      	; 0x7fa <lcd_set_pixel+0x1c>
     7f8:	3f c0       	rjmp	.+126    	; 0x878 <__stack+0x19>
     7fa:	80 34       	cpi	r24, 0x40	; 64
     7fc:	18 f0       	brcs	.+6      	; 0x804 <lcd_set_pixel+0x26>
     7fe:	c0 54       	subi	r28, 0x40	; 64
     800:	d2 e0       	ldi	r29, 0x02	; 2
     802:	01 c0       	rjmp	.+2      	; 0x806 <lcd_set_pixel+0x28>
     804:	d1 e0       	ldi	r29, 0x01	; 1
     806:	6d 2f       	mov	r22, r29
     808:	81 2f       	mov	r24, r17
     80a:	86 95       	lsr	r24
     80c:	86 95       	lsr	r24
     80e:	86 95       	lsr	r24
     810:	88 6b       	ori	r24, 0xB8	; 184
     812:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     816:	c0 64       	ori	r28, 0x40	; 64
     818:	6d 2f       	mov	r22, r29
     81a:	8c 2f       	mov	r24, r28
     81c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     820:	8d 2f       	mov	r24, r29
     822:	0e 94 8f 03 	call	0x71e	; 0x71e <lcd_read_data>
     826:	6d 2f       	mov	r22, r29
     828:	8c 2f       	mov	r24, r28
     82a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     82e:	8d 2f       	mov	r24, r29
     830:	0e 94 8f 03 	call	0x71e	; 0x71e <lcd_read_data>
     834:	08 2f       	mov	r16, r24
     836:	6d 2f       	mov	r22, r29
     838:	8c 2f       	mov	r24, r28
     83a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	f8 12       	cpse	r15, r24
     842:	0c c0       	rjmp	.+24     	; 0x85c <lcd_set_pixel+0x7e>
     844:	17 70       	andi	r17, 0x07	; 7
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9c 01       	movw	r18, r24
     84c:	02 c0       	rjmp	.+4      	; 0x852 <lcd_set_pixel+0x74>
     84e:	22 0f       	add	r18, r18
     850:	33 1f       	adc	r19, r19
     852:	1a 95       	dec	r17
     854:	e2 f7       	brpl	.-8      	; 0x84e <lcd_set_pixel+0x70>
     856:	80 2f       	mov	r24, r16
     858:	82 2b       	or	r24, r18
     85a:	0b c0       	rjmp	.+22     	; 0x872 <__stack+0x13>
     85c:	17 70       	andi	r17, 0x07	; 7
     85e:	21 e0       	ldi	r18, 0x01	; 1
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
     864:	22 0f       	add	r18, r18
     866:	33 1f       	adc	r19, r19
     868:	1a 95       	dec	r17
     86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
     86c:	20 95       	com	r18
     86e:	82 2f       	mov	r24, r18
     870:	80 23       	and	r24, r16
     872:	6d 2f       	mov	r22, r29
     874:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <lcd_write_data>
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	08 95       	ret

00000884 <font_char_width>:
     884:	9c 01       	movw	r18, r24
     886:	fc 01       	movw	r30, r24
     888:	34 96       	adiw	r30, 0x04	; 4
     88a:	94 91       	lpm	r25, Z
     88c:	e6 2f       	mov	r30, r22
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	e9 1b       	sub	r30, r25
     892:	f1 09       	sbc	r31, r1
     894:	36 96       	adiw	r30, 0x06	; 6
     896:	e2 0f       	add	r30, r18
     898:	f3 1f       	adc	r31, r19
     89a:	84 91       	lpm	r24, Z
     89c:	08 95       	ret

0000089e <font_char_present>:
     89e:	fc 01       	movw	r30, r24
     8a0:	34 96       	adiw	r30, 0x04	; 4
     8a2:	24 91       	lpm	r18, Z
     8a4:	62 17       	cp	r22, r18
     8a6:	70 f0       	brcs	.+28     	; 0x8c4 <font_char_present+0x26>
     8a8:	24 91       	lpm	r18, Z
     8aa:	31 96       	adiw	r30, 0x01	; 1
     8ac:	e4 91       	lpm	r30, Z
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	e2 0f       	add	r30, r18
     8b4:	f1 1d       	adc	r31, r1
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	e6 17       	cp	r30, r22
     8bc:	f7 07       	cpc	r31, r23
     8be:	1c f4       	brge	.+6      	; 0x8c6 <font_char_present+0x28>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	08 95       	ret
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	08 95       	ret

000008c8 <font_start_offset>:

// ---------------------------------
// get the start offset of char
// ---------------------------------
uint16_t font_start_offset(const uint8_t*font,uint8_t chr) 
{
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	7c 01       	movw	r14, r24
     8da:	d6 2f       	mov	r29, r22
// ---------------------------------
// get height of font
// ---------------------------------
uint8_t font_char_height(const uint8_t*font)
{
  return(pgm_read_byte(font+3)); // return the first used char of the font
     8dc:	fc 01       	movw	r30, r24
     8de:	33 96       	adiw	r30, 0x03	; 3
     8e0:	e4 91       	lpm	r30, Z
// ---------------------------------
uint16_t font_start_offset(const uint8_t*font,uint8_t chr) 
{
  uint16_t offset=(uint16_t)0x0000;
  uint8_t cnt;
  uint8_t height= (font_char_height(font)-1)/8;
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	6f 01       	movw	r12, r30
     8e8:	1a f4       	brpl	.+6      	; 0x8f0 <font_start_offset+0x28>
     8ea:	27 e0       	ldi	r18, 0x07	; 7
     8ec:	c2 0e       	add	r12, r18
     8ee:	d1 1c       	adc	r13, r1
     8f0:	d5 94       	asr	r13
     8f2:	c7 94       	ror	r12
     8f4:	d5 94       	asr	r13
     8f6:	c7 94       	ror	r12
     8f8:	d5 94       	asr	r13
     8fa:	c7 94       	ror	r12
// ---------------------------------
// get first char in font
// ---------------------------------
uint8_t font_first_char(const uint8_t*font)	
{	
  return(pgm_read_byte(font+4)); // return the first used char of the font	
     8fc:	f7 01       	movw	r30, r14
     8fe:	34 96       	adiw	r30, 0x04	; 4
     900:	c4 91       	lpm	r28, Z
{
  uint16_t offset=(uint16_t)0x0000;
  uint8_t cnt;
  uint8_t height= (font_char_height(font)-1)/8;

  for (cnt= font_first_char(font);cnt<chr;cnt++)
     902:	cd 17       	cp	r28, r29
     904:	b0 f4       	brcc	.+44     	; 0x932 <font_start_offset+0x6a>
     906:	00 e0       	ldi	r16, 0x00	; 0
     908:	10 e0       	ldi	r17, 0x00	; 0
  {
    offset+=font_char_width(font,cnt) * (height+1); // width * (number of pages) needed for each char
     90a:	dd 24       	eor	r13, r13
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	c8 1a       	sub	r12, r24
     910:	d8 0a       	sbc	r13, r24
     912:	6c 2f       	mov	r22, r28
     914:	c7 01       	movw	r24, r14
     916:	0e 94 42 04 	call	0x884	; 0x884 <font_char_width>
     91a:	28 2f       	mov	r18, r24
     91c:	2c 9d       	mul	r18, r12
     91e:	c0 01       	movw	r24, r0
     920:	2d 9d       	mul	r18, r13
     922:	90 0d       	add	r25, r0
     924:	11 24       	eor	r1, r1
     926:	08 0f       	add	r16, r24
     928:	19 1f       	adc	r17, r25
{
  uint16_t offset=(uint16_t)0x0000;
  uint8_t cnt;
  uint8_t height= (font_char_height(font)-1)/8;

  for (cnt= font_first_char(font);cnt<chr;cnt++)
     92a:	cf 5f       	subi	r28, 0xFF	; 255
     92c:	cd 17       	cp	r28, r29
     92e:	88 f3       	brcs	.-30     	; 0x912 <font_start_offset+0x4a>
     930:	02 c0       	rjmp	.+4      	; 0x936 <font_start_offset+0x6e>
// ---------------------------------
// get the start offset of char
// ---------------------------------
uint16_t font_start_offset(const uint8_t*font,uint8_t chr) 
{
  uint16_t offset=(uint16_t)0x0000;
     932:	00 e0       	ldi	r16, 0x00	; 0
     934:	10 e0       	ldi	r17, 0x00	; 0
// ---------------------------------
// get the count of chars in font
// ---------------------------------
uint8_t font_number_of_chars(const uint8_t* font)	
{	
  return(pgm_read_byte(font+5)); // return number of characters stored in this font	
     936:	f7 01       	movw	r30, r14
     938:	35 96       	adiw	r30, 0x05	; 5
     93a:	84 91       	lpm	r24, Z
    offset+=font_char_width(font,cnt) * (height+1); // width * (number of pages) needed for each char
  }	
	
  offset+=font_number_of_chars(font)+6;				// add 6 for the header-bytes and the number of bytes need for the width-array

  return offset;
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	06 96       	adiw	r24, 0x06	; 6
}
     940:	80 0f       	add	r24, r16
     942:	91 1f       	adc	r25, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <lcd_set_cursor>:
// ---------------------------------
// set cursor to x,y
// ---------------------------------
void lcd_set_cursor(uint8_t x, uint8_t y)
{
  if(x<128)	cursor_x=x;
     956:	88 23       	and	r24, r24
     958:	14 f0       	brlt	.+4      	; 0x95e <lcd_set_cursor+0x8>
     95a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <cursor_x>
  if(y<64) 	cursor_y=y;
     95e:	60 34       	cpi	r22, 0x40	; 64
     960:	10 f4       	brcc	.+4      	; 0x966 <lcd_set_cursor+0x10>
     962:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <cursor_y>
     966:	08 95       	ret

00000968 <lcd_putc>:

// ---------------------------------
// put char to screen
// ---------------------------------
void lcd_putc(const uint8_t* font,uint8_t chr)
{
     968:	3f 92       	push	r3
     96a:	4f 92       	push	r4
     96c:	5f 92       	push	r5
     96e:	6f 92       	push	r6
     970:	7f 92       	push	r7
     972:	8f 92       	push	r8
     974:	9f 92       	push	r9
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	7c 01       	movw	r14, r24
     98c:	56 2e       	mov	r5, r22
  uint8_t x,page,bit,data,cnt=0;
	
  if (font_char_present(font,chr)==1)	// print only if letter is present in font
     98e:	0e 94 4f 04 	call	0x89e	; 0x89e <font_char_present>
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	09 f0       	breq	.+2      	; 0x998 <lcd_putc+0x30>
     996:	e6 c0       	rjmp	.+460    	; 0xb64 <lcd_putc+0x1fc>
  {
    if ( ( (cursor_x + font_char_width(font,chr)) <128)  && ((cursor_y+font_char_height(font))<=64))	// only print leeter if it fits in screen
     998:	c0 91 82 00 	lds	r28, 0x0082	; 0x800082 <cursor_x>
     99c:	65 2d       	mov	r22, r5
     99e:	c7 01       	movw	r24, r14
     9a0:	0e 94 42 04 	call	0x884	; 0x884 <font_char_width>
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	8c 0f       	add	r24, r28
     9a8:	91 1d       	adc	r25, r1
     9aa:	80 38       	cpi	r24, 0x80	; 128
     9ac:	91 05       	cpc	r25, r1
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <lcd_putc+0x4a>
     9b0:	d9 c0       	rjmp	.+434    	; 0xb64 <lcd_putc+0x1fc>
     9b2:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <cursor_y>
// ---------------------------------
// get height of font
// ---------------------------------
uint8_t font_char_height(const uint8_t*font)
{
  return(pgm_read_byte(font+3)); // return the first used char of the font
     9b6:	67 01       	movw	r12, r14
     9b8:	43 e0       	ldi	r20, 0x03	; 3
     9ba:	c4 0e       	add	r12, r20
     9bc:	d1 1c       	adc	r13, r1
     9be:	f6 01       	movw	r30, r12
     9c0:	84 91       	lpm	r24, Z
{
  uint8_t x,page,bit,data,cnt=0;
	
  if (font_char_present(font,chr)==1)	// print only if letter is present in font
  {
    if ( ( (cursor_x + font_char_width(font,chr)) <128)  && ((cursor_y+font_char_height(font))<=64))	// only print leeter if it fits in screen
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	82 0f       	add	r24, r18
     9c6:	91 1d       	adc	r25, r1
     9c8:	81 34       	cpi	r24, 0x41	; 65
     9ca:	91 05       	cpc	r25, r1
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <lcd_putc+0x68>
     9ce:	ca c0       	rjmp	.+404    	; 0xb64 <lcd_putc+0x1fc>
    {
      uint16_t offset= font_start_offset(font,chr);	// get the position of the first byte in font-array
     9d0:	65 2d       	mov	r22, r5
     9d2:	c7 01       	movw	r24, r14
     9d4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <font_start_offset>
     9d8:	5c 01       	movw	r10, r24
// ---------------------------------
// get height of font
// ---------------------------------
uint8_t font_char_height(const uint8_t*font)
{
  return(pgm_read_byte(font+3)); // return the first used char of the font
     9da:	f6 01       	movw	r30, r12
     9dc:	84 91       	lpm	r24, Z
  {
    if ( ( (cursor_x + font_char_width(font,chr)) <128)  && ((cursor_y+font_char_height(font))<=64))	// only print leeter if it fits in screen
    {
      uint16_t offset= font_start_offset(font,chr);	// get the position of the first byte in font-array
			
      for(page=0;page<=(font_char_height(font)-1)/8;page++)	// write all pages(rows)
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	89 3f       	cpi	r24, 0xF9	; 249
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	0c f4       	brge	.+2      	; 0x9ea <lcd_putc+0x82>
     9e8:	a8 c0       	rjmp	.+336    	; 0xb3a <lcd_putc+0x1d2>
     9ea:	61 2c       	mov	r6, r1
     9ec:	31 2c       	mov	r3, r1
     9ee:	41 2c       	mov	r4, r1
        for (x=cursor_x;x<cursor_x + font_char_width(font,chr);x++)	//fill "pages"
        {
          data= pgm_read_byte(font+offset+cnt++);

          if ( page==font_char_height(font)/8)		
            data>>=8-(font_char_height(font)%8);	// if char height is bigger than 8 we have to remove some leading zeros
     9f0:	68 94       	set
     9f2:	88 24       	eor	r8, r8
     9f4:	83 f8       	bld	r8, 3
     9f6:	91 2c       	mov	r9, r1
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <lcd_putc+0x94>
     9fa:	3c 2e       	mov	r3, r28
    {
      uint16_t offset= font_start_offset(font,chr);	// get the position of the first byte in font-array
			
      for(page=0;page<=(font_char_height(font)-1)/8;page++)	// write all pages(rows)
      {
        lcd_write_cmd(LCD_SET_PAGE|((cursor_y/8)+page),CHIP1|CHIP2);	// calc the current page
     9fc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <cursor_y>
     a00:	86 95       	lsr	r24
     a02:	86 95       	lsr	r24
     a04:	86 95       	lsr	r24
     a06:	84 0d       	add	r24, r4
     a08:	63 e0       	ldi	r22, 0x03	; 3
     a0a:	88 6b       	ori	r24, 0xB8	; 184
     a0c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>

        if (cursor_x<64)	// set cursor to its poition (0 on the inactive controller so it can start directly on chip change)
     a10:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <cursor_x>
     a14:	80 34       	cpi	r24, 0x40	; 64
     a16:	58 f4       	brcc	.+22     	; 0xa2e <lcd_putc+0xc6>
        {
          lcd_write_cmd(LCD_SET_ADD|cursor_x,CHIP1);
     a18:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <cursor_x>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	80 64       	ori	r24, 0x40	; 64
     a20:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
          lcd_write_cmd(LCD_SET_ADD|0,CHIP2);
     a24:	62 e0       	ldi	r22, 0x02	; 2
     a26:	80 e4       	ldi	r24, 0x40	; 64
     a28:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
     a2c:	07 c0       	rjmp	.+14     	; 0xa3c <lcd_putc+0xd4>
        }
        else
        {
          lcd_write_cmd(LCD_SET_ADD|(cursor_x-64),CHIP2);				
     a2e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <cursor_x>
     a32:	80 54       	subi	r24, 0x40	; 64
     a34:	62 e0       	ldi	r22, 0x02	; 2
     a36:	80 64       	ori	r24, 0x40	; 64
     a38:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lcd_write_cmd>
        }

        for (x=cursor_x;x<cursor_x + font_char_width(font,chr);x++)	//fill "pages"
     a3c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <cursor_x>
     a40:	78 2e       	mov	r7, r24
     a42:	38 1a       	sub	r3, r24
     a44:	43 c0       	rjmp	.+134    	; 0xacc <lcd_putc+0x164>
        {
          data= pgm_read_byte(font+offset+cnt++);
     a46:	f5 01       	movw	r30, r10
     a48:	ec 0f       	add	r30, r28
     a4a:	f1 1d       	adc	r31, r1
     a4c:	ee 0d       	add	r30, r14
     a4e:	ff 1d       	adc	r31, r15
     a50:	84 91       	lpm	r24, Z
// ---------------------------------
// get height of font
// ---------------------------------
uint8_t font_char_height(const uint8_t*font)
{
  return(pgm_read_byte(font+3)); // return the first used char of the font
     a52:	f6 01       	movw	r30, r12
     a54:	94 91       	lpm	r25, Z

        for (x=cursor_x;x<cursor_x + font_char_width(font,chr);x++)	//fill "pages"
        {
          data= pgm_read_byte(font+offset+cnt++);

          if ( page==font_char_height(font)/8)		
     a56:	96 95       	lsr	r25
     a58:	96 95       	lsr	r25
     a5a:	96 95       	lsr	r25
     a5c:	94 11       	cpse	r25, r4
     a5e:	78 c0       	rjmp	.+240    	; 0xb50 <lcd_putc+0x1e8>
// ---------------------------------
// get height of font
// ---------------------------------
uint8_t font_char_height(const uint8_t*font)
{
  return(pgm_read_byte(font+3)); // return the first used char of the font
     a60:	24 91       	lpm	r18, Z
        for (x=cursor_x;x<cursor_x + font_char_width(font,chr);x++)	//fill "pages"
        {
          data= pgm_read_byte(font+offset+cnt++);

          if ( page==font_char_height(font)/8)		
            data>>=8-(font_char_height(font)%8);	// if char height is bigger than 8 we have to remove some leading zeros
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	27 70       	andi	r18, 0x07	; 7
     a66:	a4 01       	movw	r20, r8
     a68:	42 1b       	sub	r20, r18
     a6a:	51 09       	sbc	r21, r1
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <lcd_putc+0x10a>
     a6e:	95 95       	asr	r25
     a70:	87 95       	ror	r24
     a72:	4a 95       	dec	r20
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <lcd_putc+0x106>
     a76:	6c c0       	rjmp	.+216    	; 0xb50 <lcd_putc+0x1e8>
					
          #ifdef FASTTEXT								// this is much much faster than using set_pixel (see discription in header file)
            if (cursor_y%8==0 )
            {
              if (x<64)								
     a78:	5f e3       	ldi	r21, 0x3F	; 63
     a7a:	57 15       	cp	r21, r7
     a7c:	20 f0       	brcs	.+8      	; 0xa86 <lcd_putc+0x11e>
                lcd_write_data(data,CHIP1);						
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <lcd_write_data>
     a84:	22 c0       	rjmp	.+68     	; 0xaca <lcd_putc+0x162>
              else									
                lcd_write_data(data,CHIP2);					
     a86:	62 e0       	ldi	r22, 0x02	; 2
     a88:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <lcd_write_data>
     a8c:	1e c0       	rjmp	.+60     	; 0xaca <lcd_putc+0x162>
            else
          #endif
          {
            for (bit=0;bit<8;bit++)
            {
              if ((data&(1<<bit))!=0)
     a8e:	c8 01       	movw	r24, r16
     a90:	0c 2e       	mov	r0, r28
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <lcd_putc+0x130>
     a94:	95 95       	asr	r25
     a96:	87 95       	ror	r24
     a98:	0a 94       	dec	r0
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <lcd_putc+0x12c>
     a9c:	80 ff       	sbrs	r24, 0
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <lcd_putc+0x14a>
                lcd_set_pixel(x,cursor_y+page*8+bit,BLACK);
     aa0:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <cursor_y>
     aa4:	66 0d       	add	r22, r6
     aa6:	6c 0f       	add	r22, r28
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	87 2d       	mov	r24, r7
     aac:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>
     ab0:	08 c0       	rjmp	.+16     	; 0xac2 <lcd_putc+0x15a>
              else
			    lcd_set_pixel(x,cursor_y+page*8+bit,WHITE); 
     ab2:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <cursor_y>
     ab6:	66 0d       	add	r22, r6
     ab8:	6c 0f       	add	r22, r28
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	87 2d       	mov	r24, r7
     abe:	0e 94 ef 03 	call	0x7de	; 0x7de <lcd_set_pixel>
     ac2:	21 96       	adiw	r28, 0x01	; 1
                lcd_write_data(data,CHIP2);					
            }
            else
          #endif
          {
            for (bit=0;bit<8;bit++)
     ac4:	c8 30       	cpi	r28, 0x08	; 8
     ac6:	d1 05       	cpc	r29, r1
     ac8:	11 f7       	brne	.-60     	; 0xa8e <lcd_putc+0x126>
        else
        {
          lcd_write_cmd(LCD_SET_ADD|(cursor_x-64),CHIP2);				
        }

        for (x=cursor_x;x<cursor_x + font_char_width(font,chr);x++)	//fill "pages"
     aca:	73 94       	inc	r7
     acc:	c7 2d       	mov	r28, r7
     ace:	c3 0d       	add	r28, r3
     ad0:	d0 91 82 00 	lds	r29, 0x0082	; 0x800082 <cursor_x>
     ad4:	65 2d       	mov	r22, r5
     ad6:	c7 01       	movw	r24, r14
     ad8:	0e 94 42 04 	call	0x884	; 0x884 <font_char_width>
     adc:	27 2d       	mov	r18, r7
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	8d 0f       	add	r24, r29
     ae4:	91 1d       	adc	r25, r1
     ae6:	28 17       	cp	r18, r24
     ae8:	39 07       	cpc	r19, r25
     aea:	0c f4       	brge	.+2      	; 0xaee <lcd_putc+0x186>
     aec:	ac cf       	rjmp	.-168    	; 0xa46 <lcd_putc+0xde>
            }
          }
        }			
				
        #ifdef FASTTEXT
          if(cursor_y%8==0)
     aee:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <cursor_y>
     af2:	87 70       	andi	r24, 0x07	; 7
     af4:	59 f4       	brne	.+22     	; 0xb0c <lcd_putc+0x1a4>
          {
            if (x<64)								
     af6:	2f e3       	ldi	r18, 0x3F	; 63
     af8:	27 15       	cp	r18, r7
     afa:	20 f0       	brcs	.+8      	; 0xb04 <lcd_putc+0x19c>
              lcd_write_data(0,CHIP1);						
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <lcd_write_data>
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <lcd_putc+0x1a4>
            else									
              lcd_write_data(0,CHIP2);				
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <lcd_write_data>
  {
    if ( ( (cursor_x + font_char_width(font,chr)) <128)  && ((cursor_y+font_char_height(font))<=64))	// only print leeter if it fits in screen
    {
      uint16_t offset= font_start_offset(font,chr);	// get the position of the first byte in font-array
			
      for(page=0;page<=(font_char_height(font)-1)/8;page++)	// write all pages(rows)
     b0c:	43 94       	inc	r4
// ---------------------------------
// get height of font
// ---------------------------------
uint8_t font_char_height(const uint8_t*font)
{
  return(pgm_read_byte(font+3)); // return the first used char of the font
     b0e:	f6 01       	movw	r30, r12
     b10:	84 91       	lpm	r24, Z
     b12:	f8 e0       	ldi	r31, 0x08	; 8
     b14:	6f 0e       	add	r6, r31
  {
    if ( ( (cursor_x + font_char_width(font,chr)) <128)  && ((cursor_y+font_char_height(font))<=64))	// only print leeter if it fits in screen
    {
      uint16_t offset= font_start_offset(font,chr);	// get the position of the first byte in font-array
			
      for(page=0;page<=(font_char_height(font)-1)/8;page++)	// write all pages(rows)
     b16:	24 2d       	mov	r18, r4
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	ac 01       	movw	r20, r24
     b20:	12 f4       	brpl	.+4      	; 0xb26 <lcd_putc+0x1be>
     b22:	49 5f       	subi	r20, 0xF9	; 249
     b24:	5f 4f       	sbci	r21, 0xFF	; 255
     b26:	55 95       	asr	r21
     b28:	47 95       	ror	r20
     b2a:	55 95       	asr	r21
     b2c:	47 95       	ror	r20
     b2e:	55 95       	asr	r21
     b30:	47 95       	ror	r20
     b32:	42 17       	cp	r20, r18
     b34:	53 07       	cpc	r21, r19
     b36:	0c f0       	brlt	.+2      	; 0xb3a <lcd_putc+0x1d2>
     b38:	60 cf       	rjmp	.-320    	; 0x9fa <lcd_putc+0x92>
            else									
              lcd_write_data(0,CHIP2);				
          }
        #endif
      }		
      cursor_x += font_char_width(font,chr)+1;
     b3a:	65 2d       	mov	r22, r5
     b3c:	c7 01       	movw	r24, r14
     b3e:	0e 94 42 04 	call	0x884	; 0x884 <font_char_width>
     b42:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <cursor_x>
     b46:	89 0f       	add	r24, r25
     b48:	8f 5f       	subi	r24, 0xFF	; 255
     b4a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <cursor_x>
    }
  }
}
     b4e:	0a c0       	rjmp	.+20     	; 0xb64 <lcd_putc+0x1fc>

          if ( page==font_char_height(font)/8)		
            data>>=8-(font_char_height(font)%8);	// if char height is bigger than 8 we have to remove some leading zeros
					
          #ifdef FASTTEXT								// this is much much faster than using set_pixel (see discription in header file)
            if (cursor_y%8==0 )
     b50:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <cursor_y>
     b54:	97 70       	andi	r25, 0x07	; 7
     b56:	09 f4       	brne	.+2      	; 0xb5a <lcd_putc+0x1f2>
     b58:	8f cf       	rjmp	.-226    	; 0xa78 <lcd_putc+0x110>
     b5a:	c0 e0       	ldi	r28, 0x00	; 0
     b5c:	d0 e0       	ldi	r29, 0x00	; 0
            else
          #endif
          {
            for (bit=0;bit<8;bit++)
            {
              if ((data&(1<<bit))!=0)
     b5e:	08 2f       	mov	r16, r24
     b60:	10 e0       	ldi	r17, 0x00	; 0
     b62:	95 cf       	rjmp	.-214    	; 0xa8e <lcd_putc+0x126>
        #endif
      }		
      cursor_x += font_char_width(font,chr)+1;
    }
  }
}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	bf 90       	pop	r11
     b76:	af 90       	pop	r10
     b78:	9f 90       	pop	r9
     b7a:	8f 90       	pop	r8
     b7c:	7f 90       	pop	r7
     b7e:	6f 90       	pop	r6
     b80:	5f 90       	pop	r5
     b82:	4f 90       	pop	r4
     b84:	3f 90       	pop	r3
     b86:	08 95       	ret

00000b88 <lcd_puts>:

// ---------------------------------
// put string to screen (from ram)
// ---------------------------------
void lcd_puts(const uint8_t* font,char* string)
{
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	eb 01       	movw	r28, r22
  while(*string)lcd_putc(font,*string++);
     b92:	68 81       	ld	r22, Y
     b94:	66 23       	and	r22, r22
     b96:	41 f0       	breq	.+16     	; 0xba8 <lcd_puts+0x20>
     b98:	8c 01       	movw	r16, r24
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	c8 01       	movw	r24, r16
     b9e:	0e 94 b4 04 	call	0x968	; 0x968 <lcd_putc>
     ba2:	69 91       	ld	r22, Y+
     ba4:	61 11       	cpse	r22, r1
     ba6:	fa cf       	rjmp	.-12     	; 0xb9c <lcd_puts+0x14>
}
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	08 95       	ret

00000bb2 <main>:

int main(void)
{	

  //Initialize LCD
  lcd_init();
     bb2:	0e 94 ab 03 	call	0x756	; 0x756 <lcd_init>
  lcd_clear();
     bb6:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_clear>
  lcd_set_cursor(0,0);
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 ab 04 	call	0x956	; 0x956 <lcd_set_cursor>
  
  //Check Watchdog timer status
  if(MCUCSR&(1<<WDRF))
     bc2:	04 b6       	in	r0, 0x34	; 52
     bc4:	03 fe       	sbrs	r0, 3
     bc6:	13 c0       	rjmp	.+38     	; 0xbee <main+0x3c>
  {
    //If condition is true, display error message for 2 seconds
    lcd_puts(font5x8,"UART Error : reset");
     bc8:	62 e6       	ldi	r22, 0x62	; 98
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	8e e4       	ldi	r24, 0x4E	; 78
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	0e 94 c4 05 	call	0xb88	; 0xb88 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	83 ed       	ldi	r24, 0xD3	; 211
     bd8:	90 e3       	ldi	r25, 0x30	; 48
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	80 40       	sbci	r24, 0x00	; 0
     bde:	90 40       	sbci	r25, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <main+0x28>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <main+0x32>
     be4:	00 00       	nop
    _delay_ms(2000);

    //Clear Watchdog reset pin
    WatchDog_clear();
     be6:	0e 94 be 06 	call	0xd7c	; 0xd7c <WatchDog_clear>

    //Clear LCD from error message
    lcd_clear();
     bea:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_clear>
  }
  
  //Initialize Timer for PWM output
  timer0_init();
     bee:	0e 94 aa 06 	call	0xd54	; 0xd54 <timer0_init>
  
  //Initialize UART 
  uart_init(9600);
     bf2:	80 e8       	ldi	r24, 0x80	; 128
     bf4:	95 e2       	ldi	r25, 0x25	; 37
     bf6:	0e 94 d6 06 	call	0xdac	; 0xdac <uart_init>
  
  //Enable WatchDog timer
  WatchDog_on();
     bfa:	0e 94 b7 06 	call	0xd6e	; 0xd6e <WatchDog_on>
  
  //Enable Global Interrupt
  sei();
     bfe:	78 94       	sei
     c00:	ff cf       	rjmp	.-2      	; 0xc00 <main+0x4e>

00000c02 <Plot>:
  
}


void Plot()
{
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17

  wdt_reset();														        // Reset watchdog timer
     c06:	a8 95       	wdr
  ui8_RX = UDR;														       // Read high byte from UART
     c08:	8c b1       	in	r24, 0x0c	; 12
     c0a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <ui8_RX>
  timer0_cycle(ui8_RX);													// Set PWM output for LED Brightness
     c0e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ui8_RX>
     c12:	0e 94 b5 06 	call	0xd6a	; 0xd6a <timer0_cycle>
  f_volt = (ui8_RX*5.0)/255;
     c16:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <ui8_RX>
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 f6 07 	call	0xfec	; 0xfec <__floatsisf>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 ea       	ldi	r20, 0xA0	; 160
     c2a:	50 e4       	ldi	r21, 0x40	; 64
     c2c:	0e 94 a6 08 	call	0x114c	; 0x114c <__mulsf3>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	4f e7       	ldi	r20, 0x7F	; 127
     c36:	53 e4       	ldi	r21, 0x43	; 67
     c38:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3>
     c3c:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <f_volt>
     c40:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <f_volt+0x1>
     c44:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <f_volt+0x2>
     c48:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <f_volt+0x3>
  
  dtostrf(f_volt,3,2,c_data_array);						//Convert the value into a string for printing
     c4c:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <f_volt>
     c50:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <f_volt+0x1>
     c54:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <f_volt+0x2>
     c58:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <f_volt+0x3>
     c5c:	03 e8       	ldi	r16, 0x83	; 131
     c5e:	10 e0       	ldi	r17, 0x00	; 0
     c60:	22 e0       	ldi	r18, 0x02	; 2
     c62:	43 e0       	ldi	r20, 0x03	; 3
     c64:	0e 94 c9 09 	call	0x1392	; 0x1392 <dtostrf>
  lcd_set_cursor(0,55);												// Set cursor location for printing
     c68:	67 e3       	ldi	r22, 0x37	; 55
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 ab 04 	call	0x956	; 0x956 <lcd_set_cursor>
  lcd_puts(font5x8,c_data_array);							// print the volt value
     c70:	b8 01       	movw	r22, r16
     c72:	8e e4       	ldi	r24, 0x4E	; 78
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 c4 05 	call	0xb88	; 0xb88 <lcd_puts>
  lcd_puts(font5x8,"v");											// Print 'v'-volts
     c7a:	65 e7       	ldi	r22, 0x75	; 117
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	8e e4       	ldi	r24, 0x4E	; 78
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 c4 05 	call	0xb88	; 0xb88 <lcd_puts>
  
  ui8_scale = 44 - (ui8_RX*40)/255;					  // Set curve scale
     c86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ui8_RX>
     c8a:	28 e2       	ldi	r18, 0x28	; 40
     c8c:	82 9f       	mul	r24, r18
     c8e:	c0 01       	movw	r24, r0
     c90:	11 24       	eor	r1, r1
     c92:	6f ef       	ldi	r22, 0xFF	; 255
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__divmodhi4>
     c9a:	8c e2       	ldi	r24, 0x2C	; 44
     c9c:	86 1b       	sub	r24, r22
     c9e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <ui8_scale>
  
  g_Interp1(ui8_time1,ui8_scale1,ui8_time,ui8_scale,1);				// Plot graph using interpolation function
     ca2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <ui8_scale>
     ca6:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <ui8_time>
     caa:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     cae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ui8_time1>
     cb2:	01 e0       	ldi	r16, 0x01	; 1
     cb4:	0e 94 07 02 	call	0x40e	; 0x40e <g_Interp1>
  g_VLine(ui8_delbar,0,50,0);										              // Create delete bar to update the curve
     cb8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ui8_delbar>
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	42 e3       	ldi	r20, 0x32	; 50
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <g_VLine>
  
  ui8_scale1 = ui8_scale;										                	//Save previous data point
     cc6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <ui8_scale>
     cca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ui8_time1 = ui8_time;												                //Save previous time-frame point
     cce:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ui8_time>
     cd2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ui8_time1>
  ui8_time++;
     cd6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ui8_time>
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <ui8_time>
  ui8_delbar++;														                    //Increment time-axis & delete bar location
     ce0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ui8_delbar>
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ui8_delbar>


  // if time-axis reaches the end of LCD, reset time variables
  if(ui8_time>125)
     cea:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ui8_time>
     cee:	8e 37       	cpi	r24, 0x7E	; 126
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <Plot+0xf8>
  {
    // Reset time variables
    ui8_time =0;
     cf2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <ui8_time>
    ui8_time1=0;
     cf6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <ui8_time1>
  }
  
  if(ui8_delbar>125)
     cfa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ui8_delbar>
     cfe:	8e 37       	cpi	r24, 0x7E	; 126
     d00:	10 f0       	brcs	.+4      	; 0xd06 <Plot+0x104>
  {
    // Reset delete bar variable
    ui8_delbar=0;
     d02:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <ui8_delbar>
  }



}
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <__vector_13>:

// Function prototype
void Plot();

ISR(USART_RXC_vect)
{	
     d0c:	1f 92       	push	r1
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	0f 92       	push	r0
     d14:	11 24       	eor	r1, r1
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
  
  // Plotting function
  Plot();
     d2e:	0e 94 01 06 	call	0xc02	; 0xc02 <Plot>
    

}
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	bf 91       	pop	r27
     d38:	af 91       	pop	r26
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	7f 91       	pop	r23
     d40:	6f 91       	pop	r22
     d42:	5f 91       	pop	r21
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <timer0_init>:

 void timer0_init()
 {
  
  // Set wave generation mode to fast PWM
  TCCR0 |= (1<<WGM01) | (1<<WGM00);
     d54:	83 b7       	in	r24, 0x33	; 51
     d56:	88 64       	ori	r24, 0x48	; 72
     d58:	83 bf       	out	0x33, r24	; 51
  
  //Set compare match output mode to non-inverting mode
  TCCR0 |=  (1<<COM01)| (1<<COM00);
     d5a:	83 b7       	in	r24, 0x33	; 51
     d5c:	80 63       	ori	r24, 0x30	; 48
     d5e:	83 bf       	out	0x33, r24	; 51
  
  // No timer Pre-scaling
  TCCR0 |= (1<<CS00);
     d60:	83 b7       	in	r24, 0x33	; 51
     d62:	81 60       	ori	r24, 0x01	; 1
     d64:	83 bf       	out	0x33, r24	; 51
  
  
  //Enable pin OCR0 as output
  DDRB |= (1<<DDB3);
     d66:	bb 9a       	sbi	0x17, 3	; 23
     d68:	08 95       	ret

00000d6a <timer0_cycle>:

 void timer0_cycle(uint8_t duty_cycle)
 {
  
  // Set the Duty cycle
  OCR0 = duty_cycle;
     d6a:	8c bf       	out	0x3c, r24	; 60
     d6c:	08 95       	ret

00000d6e <WatchDog_on>:


 void WatchDog_on ()
 {
  //Enable watchdog timer
  WDTCR |= (1<<WDE);
     d6e:	81 b5       	in	r24, 0x21	; 33
     d70:	88 60       	ori	r24, 0x08	; 8
     d72:	81 bd       	out	0x21, r24	; 33
 
  
  //Set timeout period to be 2.1s
  WDTCR |= (1<<WDP0) | (1<<WDP1) | (1<<WDP2);
     d74:	81 b5       	in	r24, 0x21	; 33
     d76:	87 60       	ori	r24, 0x07	; 7
     d78:	81 bd       	out	0x21, r24	; 33
     d7a:	08 95       	ret

00000d7c <WatchDog_clear>:

 void WatchDog_clear()
 {
  
  // Clear watchdog pin
  MCUCSR &= ~(1<<WDRF);
     d7c:	84 b7       	in	r24, 0x34	; 52
     d7e:	87 7f       	andi	r24, 0xF7	; 247
     d80:	84 bf       	out	0x34, r24	; 52
     d82:	08 95       	ret

00000d84 <baud_rate>:

 // Value to be calculated that corresponds to required baud rate
 uint16_t UBRR=0;

 // Calculate UBRR value for the micro-controller
 UBRR = (F_CPU/(16*baud_val))-1;
     d84:	82 95       	swap	r24
     d86:	92 95       	swap	r25
     d88:	90 7f       	andi	r25, 0xF0	; 240
     d8a:	98 27       	eor	r25, r24
     d8c:	80 7f       	andi	r24, 0xF0	; 240
     d8e:	98 27       	eor	r25, r24
     d90:	9c 01       	movw	r18, r24
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	72 e1       	ldi	r23, 0x12	; 18
     d9a:	8a e7       	ldi	r24, 0x7A	; 122
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__divmodsi4>
     da2:	21 50       	subi	r18, 0x01	; 1
     da4:	31 09       	sbc	r19, r1

 // Split the value into the higher and lower UBRR bits
 UBRRH = (UBRR >> 8);
     da6:	30 bd       	out	0x20, r19	; 32
 UBRRL = UBRR;
     da8:	29 b9       	out	0x09, r18	; 9
     daa:	08 95       	ret

00000dac <uart_init>:

 void uart_init(uint16_t baud_val)
 {

	// Enable UART reception and transmission
	UCSRB |= (1<<RXEN);
     dac:	54 9a       	sbi	0x0a, 4	; 10
	
	// Set frame format : 8 data bits, 2 stop bits
	UCSRC |= (1<<URSEL) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0);
     dae:	20 b5       	in	r18, 0x20	; 32
     db0:	2e 68       	ori	r18, 0x8E	; 142
     db2:	20 bd       	out	0x20, r18	; 32

  //Set Parity bits
  UCSRC |= (1<<UPM1) | (1<<UPM0);
     db4:	20 b5       	in	r18, 0x20	; 32
     db6:	20 63       	ori	r18, 0x30	; 48
     db8:	20 bd       	out	0x20, r18	; 32
		
	//Enable Receive interrupt
	UCSRB |= (1<<RXCIE);
     dba:	57 9a       	sbi	0x0a, 7	; 10

 //Set baud_Rate
 baud_rate(baud_val);
     dbc:	0e 94 c2 06 	call	0xd84	; 0xd84 <baud_rate>
     dc0:	08 95       	ret

00000dc2 <__subsf3>:
     dc2:	50 58       	subi	r21, 0x80	; 128

00000dc4 <__addsf3>:
     dc4:	bb 27       	eor	r27, r27
     dc6:	aa 27       	eor	r26, r26
     dc8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__addsf3x>
     dcc:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_round>
     dd0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_pscA>
     dd4:	38 f0       	brcs	.+14     	; 0xde4 <__addsf3+0x20>
     dd6:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscB>
     dda:	20 f0       	brcs	.+8      	; 0xde4 <__addsf3+0x20>
     ddc:	39 f4       	brne	.+14     	; 0xdec <__addsf3+0x28>
     dde:	9f 3f       	cpi	r25, 0xFF	; 255
     de0:	19 f4       	brne	.+6      	; 0xde8 <__addsf3+0x24>
     de2:	26 f4       	brtc	.+8      	; 0xdec <__addsf3+0x28>
     de4:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_nan>
     de8:	0e f4       	brtc	.+2      	; 0xdec <__addsf3+0x28>
     dea:	e0 95       	com	r30
     dec:	e7 fb       	bst	r30, 7
     dee:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_inf>

00000df2 <__addsf3x>:
     df2:	e9 2f       	mov	r30, r25
     df4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_split3>
     df8:	58 f3       	brcs	.-42     	; 0xdd0 <__addsf3+0xc>
     dfa:	ba 17       	cp	r27, r26
     dfc:	62 07       	cpc	r22, r18
     dfe:	73 07       	cpc	r23, r19
     e00:	84 07       	cpc	r24, r20
     e02:	95 07       	cpc	r25, r21
     e04:	20 f0       	brcs	.+8      	; 0xe0e <__addsf3x+0x1c>
     e06:	79 f4       	brne	.+30     	; 0xe26 <__addsf3x+0x34>
     e08:	a6 f5       	brtc	.+104    	; 0xe72 <__addsf3x+0x80>
     e0a:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_zero>
     e0e:	0e f4       	brtc	.+2      	; 0xe12 <__addsf3x+0x20>
     e10:	e0 95       	com	r30
     e12:	0b 2e       	mov	r0, r27
     e14:	ba 2f       	mov	r27, r26
     e16:	a0 2d       	mov	r26, r0
     e18:	0b 01       	movw	r0, r22
     e1a:	b9 01       	movw	r22, r18
     e1c:	90 01       	movw	r18, r0
     e1e:	0c 01       	movw	r0, r24
     e20:	ca 01       	movw	r24, r20
     e22:	a0 01       	movw	r20, r0
     e24:	11 24       	eor	r1, r1
     e26:	ff 27       	eor	r31, r31
     e28:	59 1b       	sub	r21, r25
     e2a:	99 f0       	breq	.+38     	; 0xe52 <__addsf3x+0x60>
     e2c:	59 3f       	cpi	r21, 0xF9	; 249
     e2e:	50 f4       	brcc	.+20     	; 0xe44 <__addsf3x+0x52>
     e30:	50 3e       	cpi	r21, 0xE0	; 224
     e32:	68 f1       	brcs	.+90     	; 0xe8e <__addsf3x+0x9c>
     e34:	1a 16       	cp	r1, r26
     e36:	f0 40       	sbci	r31, 0x00	; 0
     e38:	a2 2f       	mov	r26, r18
     e3a:	23 2f       	mov	r18, r19
     e3c:	34 2f       	mov	r19, r20
     e3e:	44 27       	eor	r20, r20
     e40:	58 5f       	subi	r21, 0xF8	; 248
     e42:	f3 cf       	rjmp	.-26     	; 0xe2a <__addsf3x+0x38>
     e44:	46 95       	lsr	r20
     e46:	37 95       	ror	r19
     e48:	27 95       	ror	r18
     e4a:	a7 95       	ror	r26
     e4c:	f0 40       	sbci	r31, 0x00	; 0
     e4e:	53 95       	inc	r21
     e50:	c9 f7       	brne	.-14     	; 0xe44 <__addsf3x+0x52>
     e52:	7e f4       	brtc	.+30     	; 0xe72 <__addsf3x+0x80>
     e54:	1f 16       	cp	r1, r31
     e56:	ba 0b       	sbc	r27, r26
     e58:	62 0b       	sbc	r22, r18
     e5a:	73 0b       	sbc	r23, r19
     e5c:	84 0b       	sbc	r24, r20
     e5e:	ba f0       	brmi	.+46     	; 0xe8e <__addsf3x+0x9c>
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	a1 f0       	breq	.+40     	; 0xe8c <__addsf3x+0x9a>
     e64:	ff 0f       	add	r31, r31
     e66:	bb 1f       	adc	r27, r27
     e68:	66 1f       	adc	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	c2 f7       	brpl	.-16     	; 0xe60 <__addsf3x+0x6e>
     e70:	0e c0       	rjmp	.+28     	; 0xe8e <__addsf3x+0x9c>
     e72:	ba 0f       	add	r27, r26
     e74:	62 1f       	adc	r22, r18
     e76:	73 1f       	adc	r23, r19
     e78:	84 1f       	adc	r24, r20
     e7a:	48 f4       	brcc	.+18     	; 0xe8e <__addsf3x+0x9c>
     e7c:	87 95       	ror	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b7 95       	ror	r27
     e84:	f7 95       	ror	r31
     e86:	9e 3f       	cpi	r25, 0xFE	; 254
     e88:	08 f0       	brcs	.+2      	; 0xe8c <__addsf3x+0x9a>
     e8a:	b0 cf       	rjmp	.-160    	; 0xdec <__addsf3+0x28>
     e8c:	93 95       	inc	r25
     e8e:	88 0f       	add	r24, r24
     e90:	08 f0       	brcs	.+2      	; 0xe94 <__addsf3x+0xa2>
     e92:	99 27       	eor	r25, r25
     e94:	ee 0f       	add	r30, r30
     e96:	97 95       	ror	r25
     e98:	87 95       	ror	r24
     e9a:	08 95       	ret

00000e9c <__cmpsf2>:
     e9c:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_cmp>
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <__cmpsf2+0x8>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	08 95       	ret

00000ea6 <__divsf3>:
     ea6:	0e 94 67 07 	call	0xece	; 0xece <__divsf3x>
     eaa:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_round>
     eae:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscB>
     eb2:	58 f0       	brcs	.+22     	; 0xeca <__divsf3+0x24>
     eb4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_pscA>
     eb8:	40 f0       	brcs	.+16     	; 0xeca <__divsf3+0x24>
     eba:	29 f4       	brne	.+10     	; 0xec6 <__divsf3+0x20>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	29 f0       	breq	.+10     	; 0xeca <__divsf3+0x24>
     ec0:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_inf>
     ec4:	51 11       	cpse	r21, r1
     ec6:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>
     eca:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_nan>

00000ece <__divsf3x>:
     ece:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_split3>
     ed2:	68 f3       	brcs	.-38     	; 0xeae <__divsf3+0x8>

00000ed4 <__divsf3_pse>:
     ed4:	99 23       	and	r25, r25
     ed6:	b1 f3       	breq	.-20     	; 0xec4 <__divsf3+0x1e>
     ed8:	55 23       	and	r21, r21
     eda:	91 f3       	breq	.-28     	; 0xec0 <__divsf3+0x1a>
     edc:	95 1b       	sub	r25, r21
     ede:	55 0b       	sbc	r21, r21
     ee0:	bb 27       	eor	r27, r27
     ee2:	aa 27       	eor	r26, r26
     ee4:	62 17       	cp	r22, r18
     ee6:	73 07       	cpc	r23, r19
     ee8:	84 07       	cpc	r24, r20
     eea:	38 f0       	brcs	.+14     	; 0xefa <__divsf3_pse+0x26>
     eec:	9f 5f       	subi	r25, 0xFF	; 255
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	44 1f       	adc	r20, r20
     ef6:	aa 1f       	adc	r26, r26
     ef8:	a9 f3       	breq	.-22     	; 0xee4 <__divsf3_pse+0x10>
     efa:	35 d0       	rcall	.+106    	; 0xf66 <__divsf3_pse+0x92>
     efc:	0e 2e       	mov	r0, r30
     efe:	3a f0       	brmi	.+14     	; 0xf0e <__divsf3_pse+0x3a>
     f00:	e0 e8       	ldi	r30, 0x80	; 128
     f02:	32 d0       	rcall	.+100    	; 0xf68 <__divsf3_pse+0x94>
     f04:	91 50       	subi	r25, 0x01	; 1
     f06:	50 40       	sbci	r21, 0x00	; 0
     f08:	e6 95       	lsr	r30
     f0a:	00 1c       	adc	r0, r0
     f0c:	ca f7       	brpl	.-14     	; 0xf00 <__divsf3_pse+0x2c>
     f0e:	2b d0       	rcall	.+86     	; 0xf66 <__divsf3_pse+0x92>
     f10:	fe 2f       	mov	r31, r30
     f12:	29 d0       	rcall	.+82     	; 0xf66 <__divsf3_pse+0x92>
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	bb 1f       	adc	r27, r27
     f1c:	26 17       	cp	r18, r22
     f1e:	37 07       	cpc	r19, r23
     f20:	48 07       	cpc	r20, r24
     f22:	ab 07       	cpc	r26, r27
     f24:	b0 e8       	ldi	r27, 0x80	; 128
     f26:	09 f0       	breq	.+2      	; 0xf2a <__divsf3_pse+0x56>
     f28:	bb 0b       	sbc	r27, r27
     f2a:	80 2d       	mov	r24, r0
     f2c:	bf 01       	movw	r22, r30
     f2e:	ff 27       	eor	r31, r31
     f30:	93 58       	subi	r25, 0x83	; 131
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	3a f0       	brmi	.+14     	; 0xf44 <__divsf3_pse+0x70>
     f36:	9e 3f       	cpi	r25, 0xFE	; 254
     f38:	51 05       	cpc	r21, r1
     f3a:	78 f0       	brcs	.+30     	; 0xf5a <__divsf3_pse+0x86>
     f3c:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_inf>
     f40:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>
     f44:	5f 3f       	cpi	r21, 0xFF	; 255
     f46:	e4 f3       	brlt	.-8      	; 0xf40 <__divsf3_pse+0x6c>
     f48:	98 3e       	cpi	r25, 0xE8	; 232
     f4a:	d4 f3       	brlt	.-12     	; 0xf40 <__divsf3_pse+0x6c>
     f4c:	86 95       	lsr	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f7 95       	ror	r31
     f56:	9f 5f       	subi	r25, 0xFF	; 255
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__divsf3_pse+0x78>
     f5a:	88 0f       	add	r24, r24
     f5c:	91 1d       	adc	r25, r1
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret
     f66:	e1 e0       	ldi	r30, 0x01	; 1
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	bb 1f       	adc	r27, r27
     f70:	62 17       	cp	r22, r18
     f72:	73 07       	cpc	r23, r19
     f74:	84 07       	cpc	r24, r20
     f76:	ba 07       	cpc	r27, r26
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__divsf3_pse+0xae>
     f7a:	62 1b       	sub	r22, r18
     f7c:	73 0b       	sbc	r23, r19
     f7e:	84 0b       	sbc	r24, r20
     f80:	ba 0b       	sbc	r27, r26
     f82:	ee 1f       	adc	r30, r30
     f84:	88 f7       	brcc	.-30     	; 0xf68 <__divsf3_pse+0x94>
     f86:	e0 95       	com	r30
     f88:	08 95       	ret

00000f8a <__fixunssfsi>:
     f8a:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_splitA>
     f8e:	88 f0       	brcs	.+34     	; 0xfb2 <__fixunssfsi+0x28>
     f90:	9f 57       	subi	r25, 0x7F	; 127
     f92:	98 f0       	brcs	.+38     	; 0xfba <__fixunssfsi+0x30>
     f94:	b9 2f       	mov	r27, r25
     f96:	99 27       	eor	r25, r25
     f98:	b7 51       	subi	r27, 0x17	; 23
     f9a:	b0 f0       	brcs	.+44     	; 0xfc8 <__fixunssfsi+0x3e>
     f9c:	e1 f0       	breq	.+56     	; 0xfd6 <__fixunssfsi+0x4c>
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	1a f0       	brmi	.+6      	; 0xfae <__fixunssfsi+0x24>
     fa8:	ba 95       	dec	r27
     faa:	c9 f7       	brne	.-14     	; 0xf9e <__fixunssfsi+0x14>
     fac:	14 c0       	rjmp	.+40     	; 0xfd6 <__fixunssfsi+0x4c>
     fae:	b1 30       	cpi	r27, 0x01	; 1
     fb0:	91 f0       	breq	.+36     	; 0xfd6 <__fixunssfsi+0x4c>
     fb2:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_zero>
     fb6:	b1 e0       	ldi	r27, 0x01	; 1
     fb8:	08 95       	ret
     fba:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_zero>
     fbe:	67 2f       	mov	r22, r23
     fc0:	78 2f       	mov	r23, r24
     fc2:	88 27       	eor	r24, r24
     fc4:	b8 5f       	subi	r27, 0xF8	; 248
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <__fixunssfsi+0x4c>
     fc8:	b9 3f       	cpi	r27, 0xF9	; 249
     fca:	cc f3       	brlt	.-14     	; 0xfbe <__fixunssfsi+0x34>
     fcc:	86 95       	lsr	r24
     fce:	77 95       	ror	r23
     fd0:	67 95       	ror	r22
     fd2:	b3 95       	inc	r27
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <__fixunssfsi+0x42>
     fd6:	3e f4       	brtc	.+14     	; 0xfe6 <__fixunssfsi+0x5c>
     fd8:	90 95       	com	r25
     fda:	80 95       	com	r24
     fdc:	70 95       	com	r23
     fde:	61 95       	neg	r22
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	08 95       	ret

00000fe8 <__floatunsisf>:
     fe8:	e8 94       	clt
     fea:	09 c0       	rjmp	.+18     	; 0xffe <__floatsisf+0x12>

00000fec <__floatsisf>:
     fec:	97 fb       	bst	r25, 7
     fee:	3e f4       	brtc	.+14     	; 0xffe <__floatsisf+0x12>
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	99 23       	and	r25, r25
    1000:	a9 f0       	breq	.+42     	; 0x102c <__floatsisf+0x40>
    1002:	f9 2f       	mov	r31, r25
    1004:	96 e9       	ldi	r25, 0x96	; 150
    1006:	bb 27       	eor	r27, r27
    1008:	93 95       	inc	r25
    100a:	f6 95       	lsr	r31
    100c:	87 95       	ror	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	f1 11       	cpse	r31, r1
    1016:	f8 cf       	rjmp	.-16     	; 0x1008 <__floatsisf+0x1c>
    1018:	fa f4       	brpl	.+62     	; 0x1058 <__floatsisf+0x6c>
    101a:	bb 0f       	add	r27, r27
    101c:	11 f4       	brne	.+4      	; 0x1022 <__floatsisf+0x36>
    101e:	60 ff       	sbrs	r22, 0
    1020:	1b c0       	rjmp	.+54     	; 0x1058 <__floatsisf+0x6c>
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <__floatsisf+0x6c>
    102c:	88 23       	and	r24, r24
    102e:	11 f0       	breq	.+4      	; 0x1034 <__floatsisf+0x48>
    1030:	96 e9       	ldi	r25, 0x96	; 150
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <__floatsisf+0x6a>
    1034:	77 23       	and	r23, r23
    1036:	21 f0       	breq	.+8      	; 0x1040 <__floatsisf+0x54>
    1038:	9e e8       	ldi	r25, 0x8E	; 142
    103a:	87 2f       	mov	r24, r23
    103c:	76 2f       	mov	r23, r22
    103e:	05 c0       	rjmp	.+10     	; 0x104a <__floatsisf+0x5e>
    1040:	66 23       	and	r22, r22
    1042:	71 f0       	breq	.+28     	; 0x1060 <__floatsisf+0x74>
    1044:	96 e8       	ldi	r25, 0x86	; 134
    1046:	86 2f       	mov	r24, r22
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	2a f0       	brmi	.+10     	; 0x1058 <__floatsisf+0x6c>
    104e:	9a 95       	dec	r25
    1050:	66 0f       	add	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	da f7       	brpl	.-10     	; 0x104e <__floatsisf+0x62>
    1058:	88 0f       	add	r24, r24
    105a:	96 95       	lsr	r25
    105c:	87 95       	ror	r24
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret

00001062 <__fp_cmp>:
    1062:	99 0f       	add	r25, r25
    1064:	00 08       	sbc	r0, r0
    1066:	55 0f       	add	r21, r21
    1068:	aa 0b       	sbc	r26, r26
    106a:	e0 e8       	ldi	r30, 0x80	; 128
    106c:	fe ef       	ldi	r31, 0xFE	; 254
    106e:	16 16       	cp	r1, r22
    1070:	17 06       	cpc	r1, r23
    1072:	e8 07       	cpc	r30, r24
    1074:	f9 07       	cpc	r31, r25
    1076:	c0 f0       	brcs	.+48     	; 0x10a8 <__fp_cmp+0x46>
    1078:	12 16       	cp	r1, r18
    107a:	13 06       	cpc	r1, r19
    107c:	e4 07       	cpc	r30, r20
    107e:	f5 07       	cpc	r31, r21
    1080:	98 f0       	brcs	.+38     	; 0x10a8 <__fp_cmp+0x46>
    1082:	62 1b       	sub	r22, r18
    1084:	73 0b       	sbc	r23, r19
    1086:	84 0b       	sbc	r24, r20
    1088:	95 0b       	sbc	r25, r21
    108a:	39 f4       	brne	.+14     	; 0x109a <__fp_cmp+0x38>
    108c:	0a 26       	eor	r0, r26
    108e:	61 f0       	breq	.+24     	; 0x10a8 <__fp_cmp+0x46>
    1090:	23 2b       	or	r18, r19
    1092:	24 2b       	or	r18, r20
    1094:	25 2b       	or	r18, r21
    1096:	21 f4       	brne	.+8      	; 0x10a0 <__fp_cmp+0x3e>
    1098:	08 95       	ret
    109a:	0a 26       	eor	r0, r26
    109c:	09 f4       	brne	.+2      	; 0x10a0 <__fp_cmp+0x3e>
    109e:	a1 40       	sbci	r26, 0x01	; 1
    10a0:	a6 95       	lsr	r26
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	81 1d       	adc	r24, r1
    10a6:	81 1d       	adc	r24, r1
    10a8:	08 95       	ret

000010aa <__fp_inf>:
    10aa:	97 f9       	bld	r25, 7
    10ac:	9f 67       	ori	r25, 0x7F	; 127
    10ae:	80 e8       	ldi	r24, 0x80	; 128
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <__fp_nan>:
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	80 ec       	ldi	r24, 0xC0	; 192
    10ba:	08 95       	ret

000010bc <__fp_pscA>:
    10bc:	00 24       	eor	r0, r0
    10be:	0a 94       	dec	r0
    10c0:	16 16       	cp	r1, r22
    10c2:	17 06       	cpc	r1, r23
    10c4:	18 06       	cpc	r1, r24
    10c6:	09 06       	cpc	r0, r25
    10c8:	08 95       	ret

000010ca <__fp_pscB>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	12 16       	cp	r1, r18
    10d0:	13 06       	cpc	r1, r19
    10d2:	14 06       	cpc	r1, r20
    10d4:	05 06       	cpc	r0, r21
    10d6:	08 95       	ret

000010d8 <__fp_round>:
    10d8:	09 2e       	mov	r0, r25
    10da:	03 94       	inc	r0
    10dc:	00 0c       	add	r0, r0
    10de:	11 f4       	brne	.+4      	; 0x10e4 <__fp_round+0xc>
    10e0:	88 23       	and	r24, r24
    10e2:	52 f0       	brmi	.+20     	; 0x10f8 <__fp_round+0x20>
    10e4:	bb 0f       	add	r27, r27
    10e6:	40 f4       	brcc	.+16     	; 0x10f8 <__fp_round+0x20>
    10e8:	bf 2b       	or	r27, r31
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__fp_round+0x18>
    10ec:	60 ff       	sbrs	r22, 0
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <__fp_round+0x20>
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	8f 4f       	sbci	r24, 0xFF	; 255
    10f6:	9f 4f       	sbci	r25, 0xFF	; 255
    10f8:	08 95       	ret

000010fa <__fp_split3>:
    10fa:	57 fd       	sbrc	r21, 7
    10fc:	90 58       	subi	r25, 0x80	; 128
    10fe:	44 0f       	add	r20, r20
    1100:	55 1f       	adc	r21, r21
    1102:	59 f0       	breq	.+22     	; 0x111a <__fp_splitA+0x10>
    1104:	5f 3f       	cpi	r21, 0xFF	; 255
    1106:	71 f0       	breq	.+28     	; 0x1124 <__fp_splitA+0x1a>
    1108:	47 95       	ror	r20

0000110a <__fp_splitA>:
    110a:	88 0f       	add	r24, r24
    110c:	97 fb       	bst	r25, 7
    110e:	99 1f       	adc	r25, r25
    1110:	61 f0       	breq	.+24     	; 0x112a <__fp_splitA+0x20>
    1112:	9f 3f       	cpi	r25, 0xFF	; 255
    1114:	79 f0       	breq	.+30     	; 0x1134 <__fp_splitA+0x2a>
    1116:	87 95       	ror	r24
    1118:	08 95       	ret
    111a:	12 16       	cp	r1, r18
    111c:	13 06       	cpc	r1, r19
    111e:	14 06       	cpc	r1, r20
    1120:	55 1f       	adc	r21, r21
    1122:	f2 cf       	rjmp	.-28     	; 0x1108 <__fp_split3+0xe>
    1124:	46 95       	lsr	r20
    1126:	f1 df       	rcall	.-30     	; 0x110a <__fp_splitA>
    1128:	08 c0       	rjmp	.+16     	; 0x113a <__fp_splitA+0x30>
    112a:	16 16       	cp	r1, r22
    112c:	17 06       	cpc	r1, r23
    112e:	18 06       	cpc	r1, r24
    1130:	99 1f       	adc	r25, r25
    1132:	f1 cf       	rjmp	.-30     	; 0x1116 <__fp_splitA+0xc>
    1134:	86 95       	lsr	r24
    1136:	71 05       	cpc	r23, r1
    1138:	61 05       	cpc	r22, r1
    113a:	08 94       	sec
    113c:	08 95       	ret

0000113e <__fp_zero>:
    113e:	e8 94       	clt

00001140 <__fp_szero>:
    1140:	bb 27       	eor	r27, r27
    1142:	66 27       	eor	r22, r22
    1144:	77 27       	eor	r23, r23
    1146:	cb 01       	movw	r24, r22
    1148:	97 f9       	bld	r25, 7
    114a:	08 95       	ret

0000114c <__mulsf3>:
    114c:	0e 94 b9 08 	call	0x1172	; 0x1172 <__mulsf3x>
    1150:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_round>
    1154:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_pscA>
    1158:	38 f0       	brcs	.+14     	; 0x1168 <__mulsf3+0x1c>
    115a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscB>
    115e:	20 f0       	brcs	.+8      	; 0x1168 <__mulsf3+0x1c>
    1160:	95 23       	and	r25, r21
    1162:	11 f0       	breq	.+4      	; 0x1168 <__mulsf3+0x1c>
    1164:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_inf>
    1168:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_nan>
    116c:	11 24       	eor	r1, r1
    116e:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>

00001172 <__mulsf3x>:
    1172:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_split3>
    1176:	70 f3       	brcs	.-36     	; 0x1154 <__mulsf3+0x8>

00001178 <__mulsf3_pse>:
    1178:	95 9f       	mul	r25, r21
    117a:	c1 f3       	breq	.-16     	; 0x116c <__mulsf3+0x20>
    117c:	95 0f       	add	r25, r21
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	55 1f       	adc	r21, r21
    1182:	62 9f       	mul	r22, r18
    1184:	f0 01       	movw	r30, r0
    1186:	72 9f       	mul	r23, r18
    1188:	bb 27       	eor	r27, r27
    118a:	f0 0d       	add	r31, r0
    118c:	b1 1d       	adc	r27, r1
    118e:	63 9f       	mul	r22, r19
    1190:	aa 27       	eor	r26, r26
    1192:	f0 0d       	add	r31, r0
    1194:	b1 1d       	adc	r27, r1
    1196:	aa 1f       	adc	r26, r26
    1198:	64 9f       	mul	r22, r20
    119a:	66 27       	eor	r22, r22
    119c:	b0 0d       	add	r27, r0
    119e:	a1 1d       	adc	r26, r1
    11a0:	66 1f       	adc	r22, r22
    11a2:	82 9f       	mul	r24, r18
    11a4:	22 27       	eor	r18, r18
    11a6:	b0 0d       	add	r27, r0
    11a8:	a1 1d       	adc	r26, r1
    11aa:	62 1f       	adc	r22, r18
    11ac:	73 9f       	mul	r23, r19
    11ae:	b0 0d       	add	r27, r0
    11b0:	a1 1d       	adc	r26, r1
    11b2:	62 1f       	adc	r22, r18
    11b4:	83 9f       	mul	r24, r19
    11b6:	a0 0d       	add	r26, r0
    11b8:	61 1d       	adc	r22, r1
    11ba:	22 1f       	adc	r18, r18
    11bc:	74 9f       	mul	r23, r20
    11be:	33 27       	eor	r19, r19
    11c0:	a0 0d       	add	r26, r0
    11c2:	61 1d       	adc	r22, r1
    11c4:	23 1f       	adc	r18, r19
    11c6:	84 9f       	mul	r24, r20
    11c8:	60 0d       	add	r22, r0
    11ca:	21 1d       	adc	r18, r1
    11cc:	82 2f       	mov	r24, r18
    11ce:	76 2f       	mov	r23, r22
    11d0:	6a 2f       	mov	r22, r26
    11d2:	11 24       	eor	r1, r1
    11d4:	9f 57       	subi	r25, 0x7F	; 127
    11d6:	50 40       	sbci	r21, 0x00	; 0
    11d8:	9a f0       	brmi	.+38     	; 0x1200 <__mulsf3_pse+0x88>
    11da:	f1 f0       	breq	.+60     	; 0x1218 <__mulsf3_pse+0xa0>
    11dc:	88 23       	and	r24, r24
    11de:	4a f0       	brmi	.+18     	; 0x11f2 <__mulsf3_pse+0x7a>
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	bb 1f       	adc	r27, r27
    11e6:	66 1f       	adc	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	91 50       	subi	r25, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	a9 f7       	brne	.-22     	; 0x11dc <__mulsf3_pse+0x64>
    11f2:	9e 3f       	cpi	r25, 0xFE	; 254
    11f4:	51 05       	cpc	r21, r1
    11f6:	80 f0       	brcs	.+32     	; 0x1218 <__mulsf3_pse+0xa0>
    11f8:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_inf>
    11fc:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>
    1200:	5f 3f       	cpi	r21, 0xFF	; 255
    1202:	e4 f3       	brlt	.-8      	; 0x11fc <__mulsf3_pse+0x84>
    1204:	98 3e       	cpi	r25, 0xE8	; 232
    1206:	d4 f3       	brlt	.-12     	; 0x11fc <__mulsf3_pse+0x84>
    1208:	86 95       	lsr	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b7 95       	ror	r27
    1210:	f7 95       	ror	r31
    1212:	e7 95       	ror	r30
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	c1 f7       	brne	.-16     	; 0x1208 <__mulsf3_pse+0x90>
    1218:	fe 2b       	or	r31, r30
    121a:	88 0f       	add	r24, r24
    121c:	91 1d       	adc	r25, r1
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	97 f9       	bld	r25, 7
    1224:	08 95       	ret

00001226 <round>:
    1226:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_splitA>
    122a:	e8 f0       	brcs	.+58     	; 0x1266 <round+0x40>
    122c:	9e 37       	cpi	r25, 0x7E	; 126
    122e:	e8 f0       	brcs	.+58     	; 0x126a <round+0x44>
    1230:	96 39       	cpi	r25, 0x96	; 150
    1232:	b8 f4       	brcc	.+46     	; 0x1262 <round+0x3c>
    1234:	9e 38       	cpi	r25, 0x8E	; 142
    1236:	48 f4       	brcc	.+18     	; 0x124a <round+0x24>
    1238:	67 2f       	mov	r22, r23
    123a:	78 2f       	mov	r23, r24
    123c:	88 27       	eor	r24, r24
    123e:	98 5f       	subi	r25, 0xF8	; 248
    1240:	f9 cf       	rjmp	.-14     	; 0x1234 <round+0xe>
    1242:	86 95       	lsr	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	93 95       	inc	r25
    124a:	95 39       	cpi	r25, 0x95	; 149
    124c:	d0 f3       	brcs	.-12     	; 0x1242 <round+0x1c>
    124e:	b6 2f       	mov	r27, r22
    1250:	b1 70       	andi	r27, 0x01	; 1
    1252:	6b 0f       	add	r22, r27
    1254:	71 1d       	adc	r23, r1
    1256:	81 1d       	adc	r24, r1
    1258:	20 f4       	brcc	.+8      	; 0x1262 <round+0x3c>
    125a:	87 95       	ror	r24
    125c:	77 95       	ror	r23
    125e:	67 95       	ror	r22
    1260:	93 95       	inc	r25
    1262:	0c 94 37 09 	jmp	0x126e	; 0x126e <__fp_mintl>
    1266:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__fp_mpack>
    126a:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>

0000126e <__fp_mintl>:
    126e:	88 23       	and	r24, r24
    1270:	71 f4       	brne	.+28     	; 0x128e <__fp_mintl+0x20>
    1272:	77 23       	and	r23, r23
    1274:	21 f0       	breq	.+8      	; 0x127e <__fp_mintl+0x10>
    1276:	98 50       	subi	r25, 0x08	; 8
    1278:	87 2b       	or	r24, r23
    127a:	76 2f       	mov	r23, r22
    127c:	07 c0       	rjmp	.+14     	; 0x128c <__fp_mintl+0x1e>
    127e:	66 23       	and	r22, r22
    1280:	11 f4       	brne	.+4      	; 0x1286 <__fp_mintl+0x18>
    1282:	99 27       	eor	r25, r25
    1284:	0d c0       	rjmp	.+26     	; 0x12a0 <__fp_mintl+0x32>
    1286:	90 51       	subi	r25, 0x10	; 16
    1288:	86 2b       	or	r24, r22
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	2a f0       	brmi	.+10     	; 0x129a <__fp_mintl+0x2c>
    1290:	9a 95       	dec	r25
    1292:	66 0f       	add	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	da f7       	brpl	.-10     	; 0x1290 <__fp_mintl+0x22>
    129a:	88 0f       	add	r24, r24
    129c:	96 95       	lsr	r25
    129e:	87 95       	ror	r24
    12a0:	97 f9       	bld	r25, 7
    12a2:	08 95       	ret

000012a4 <__fp_mpack>:
    12a4:	9f 3f       	cpi	r25, 0xFF	; 255
    12a6:	31 f0       	breq	.+12     	; 0x12b4 <__fp_mpack_finite+0xc>

000012a8 <__fp_mpack_finite>:
    12a8:	91 50       	subi	r25, 0x01	; 1
    12aa:	20 f4       	brcc	.+8      	; 0x12b4 <__fp_mpack_finite+0xc>
    12ac:	87 95       	ror	r24
    12ae:	77 95       	ror	r23
    12b0:	67 95       	ror	r22
    12b2:	b7 95       	ror	r27
    12b4:	88 0f       	add	r24, r24
    12b6:	91 1d       	adc	r25, r1
    12b8:	96 95       	lsr	r25
    12ba:	87 95       	ror	r24
    12bc:	97 f9       	bld	r25, 7
    12be:	08 95       	ret

000012c0 <__divmodhi4>:
    12c0:	97 fb       	bst	r25, 7
    12c2:	07 2e       	mov	r0, r23
    12c4:	16 f4       	brtc	.+4      	; 0x12ca <__divmodhi4+0xa>
    12c6:	00 94       	com	r0
    12c8:	07 d0       	rcall	.+14     	; 0x12d8 <__divmodhi4_neg1>
    12ca:	77 fd       	sbrc	r23, 7
    12cc:	09 d0       	rcall	.+18     	; 0x12e0 <__divmodhi4_neg2>
    12ce:	0e 94 93 09 	call	0x1326	; 0x1326 <__udivmodhi4>
    12d2:	07 fc       	sbrc	r0, 7
    12d4:	05 d0       	rcall	.+10     	; 0x12e0 <__divmodhi4_neg2>
    12d6:	3e f4       	brtc	.+14     	; 0x12e6 <__divmodhi4_exit>

000012d8 <__divmodhi4_neg1>:
    12d8:	90 95       	com	r25
    12da:	81 95       	neg	r24
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	08 95       	ret

000012e0 <__divmodhi4_neg2>:
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255

000012e6 <__divmodhi4_exit>:
    12e6:	08 95       	ret

000012e8 <__divmodsi4>:
    12e8:	05 2e       	mov	r0, r21
    12ea:	97 fb       	bst	r25, 7
    12ec:	1e f4       	brtc	.+6      	; 0x12f4 <__divmodsi4+0xc>
    12ee:	00 94       	com	r0
    12f0:	0e 94 8b 09 	call	0x1316	; 0x1316 <__negsi2>
    12f4:	57 fd       	sbrc	r21, 7
    12f6:	07 d0       	rcall	.+14     	; 0x1306 <__divmodsi4_neg2>
    12f8:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodsi4>
    12fc:	07 fc       	sbrc	r0, 7
    12fe:	03 d0       	rcall	.+6      	; 0x1306 <__divmodsi4_neg2>
    1300:	4e f4       	brtc	.+18     	; 0x1314 <__divmodsi4_exit>
    1302:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__negsi2>

00001306 <__divmodsi4_neg2>:
    1306:	50 95       	com	r21
    1308:	40 95       	com	r20
    130a:	30 95       	com	r19
    130c:	21 95       	neg	r18
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	4f 4f       	sbci	r20, 0xFF	; 255
    1312:	5f 4f       	sbci	r21, 0xFF	; 255

00001314 <__divmodsi4_exit>:
    1314:	08 95       	ret

00001316 <__negsi2>:
    1316:	90 95       	com	r25
    1318:	80 95       	com	r24
    131a:	70 95       	com	r23
    131c:	61 95       	neg	r22
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	8f 4f       	sbci	r24, 0xFF	; 255
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	08 95       	ret

00001326 <__udivmodhi4>:
    1326:	aa 1b       	sub	r26, r26
    1328:	bb 1b       	sub	r27, r27
    132a:	51 e1       	ldi	r21, 0x11	; 17
    132c:	07 c0       	rjmp	.+14     	; 0x133c <__udivmodhi4_ep>

0000132e <__udivmodhi4_loop>:
    132e:	aa 1f       	adc	r26, r26
    1330:	bb 1f       	adc	r27, r27
    1332:	a6 17       	cp	r26, r22
    1334:	b7 07       	cpc	r27, r23
    1336:	10 f0       	brcs	.+4      	; 0x133c <__udivmodhi4_ep>
    1338:	a6 1b       	sub	r26, r22
    133a:	b7 0b       	sbc	r27, r23

0000133c <__udivmodhi4_ep>:
    133c:	88 1f       	adc	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	5a 95       	dec	r21
    1342:	a9 f7       	brne	.-22     	; 0x132e <__udivmodhi4_loop>
    1344:	80 95       	com	r24
    1346:	90 95       	com	r25
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	08 95       	ret

0000134e <__udivmodsi4>:
    134e:	a1 e2       	ldi	r26, 0x21	; 33
    1350:	1a 2e       	mov	r1, r26
    1352:	aa 1b       	sub	r26, r26
    1354:	bb 1b       	sub	r27, r27
    1356:	fd 01       	movw	r30, r26
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <__udivmodsi4_ep>

0000135a <__udivmodsi4_loop>:
    135a:	aa 1f       	adc	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	ee 1f       	adc	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	a2 17       	cp	r26, r18
    1364:	b3 07       	cpc	r27, r19
    1366:	e4 07       	cpc	r30, r20
    1368:	f5 07       	cpc	r31, r21
    136a:	20 f0       	brcs	.+8      	; 0x1374 <__udivmodsi4_ep>
    136c:	a2 1b       	sub	r26, r18
    136e:	b3 0b       	sbc	r27, r19
    1370:	e4 0b       	sbc	r30, r20
    1372:	f5 0b       	sbc	r31, r21

00001374 <__udivmodsi4_ep>:
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	1a 94       	dec	r1
    137e:	69 f7       	brne	.-38     	; 0x135a <__udivmodsi4_loop>
    1380:	60 95       	com	r22
    1382:	70 95       	com	r23
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	bd 01       	movw	r22, r26
    138e:	cf 01       	movw	r24, r30
    1390:	08 95       	ret

00001392 <dtostrf>:
    1392:	ef 92       	push	r14
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	e8 01       	movw	r28, r16
    139e:	47 fd       	sbrc	r20, 7
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <dtostrf+0x14>
    13a2:	34 e0       	ldi	r19, 0x04	; 4
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <dtostrf+0x16>
    13a6:	34 e1       	ldi	r19, 0x14	; 20
    13a8:	04 2e       	mov	r0, r20
    13aa:	00 0c       	add	r0, r0
    13ac:	55 0b       	sbc	r21, r21
    13ae:	57 ff       	sbrs	r21, 7
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <dtostrf+0x26>
    13b2:	51 95       	neg	r21
    13b4:	41 95       	neg	r20
    13b6:	51 09       	sbc	r21, r1
    13b8:	e3 2e       	mov	r14, r19
    13ba:	02 2f       	mov	r16, r18
    13bc:	24 2f       	mov	r18, r20
    13be:	ae 01       	movw	r20, r28
    13c0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <dtoa_prf>
    13c4:	ce 01       	movw	r24, r28
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ef 90       	pop	r14
    13d0:	08 95       	ret

000013d2 <dtoa_prf>:
    13d2:	a9 e0       	ldi	r26, 0x09	; 9
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ef ee       	ldi	r30, 0xEF	; 239
    13d8:	f9 e0       	ldi	r31, 0x09	; 9
    13da:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__prologue_saves__+0xc>
    13de:	6a 01       	movw	r12, r20
    13e0:	12 2f       	mov	r17, r18
    13e2:	b0 2e       	mov	r11, r16
    13e4:	2b e3       	ldi	r18, 0x3B	; 59
    13e6:	20 17       	cp	r18, r16
    13e8:	20 f0       	brcs	.+8      	; 0x13f2 <dtoa_prf+0x20>
    13ea:	ff 24       	eor	r15, r15
    13ec:	f3 94       	inc	r15
    13ee:	f0 0e       	add	r15, r16
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <dtoa_prf+0x24>
    13f2:	2c e3       	ldi	r18, 0x3C	; 60
    13f4:	f2 2e       	mov	r15, r18
    13f6:	0f 2d       	mov	r16, r15
    13f8:	27 e0       	ldi	r18, 0x07	; 7
    13fa:	ae 01       	movw	r20, r28
    13fc:	4f 5f       	subi	r20, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	0e 94 43 0b 	call	0x1686	; 0x1686 <__ftoa_engine>
    1404:	bc 01       	movw	r22, r24
    1406:	49 81       	ldd	r20, Y+1	; 0x01
    1408:	84 2f       	mov	r24, r20
    140a:	89 70       	andi	r24, 0x09	; 9
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	31 f0       	breq	.+12     	; 0x141c <dtoa_prf+0x4a>
    1410:	e1 fc       	sbrc	r14, 1
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <dtoa_prf+0x4e>
    1414:	e0 fe       	sbrs	r14, 0
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <dtoa_prf+0x52>
    1418:	90 e2       	ldi	r25, 0x20	; 32
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <dtoa_prf+0x54>
    141c:	9d e2       	ldi	r25, 0x2D	; 45
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <dtoa_prf+0x54>
    1420:	9b e2       	ldi	r25, 0x2B	; 43
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <dtoa_prf+0x54>
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	5e 2d       	mov	r21, r14
    1428:	50 71       	andi	r21, 0x10	; 16
    142a:	43 ff       	sbrs	r20, 3
    142c:	3c c0       	rjmp	.+120    	; 0x14a6 <dtoa_prf+0xd4>
    142e:	91 11       	cpse	r25, r1
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <dtoa_prf+0x64>
    1432:	83 e0       	ldi	r24, 0x03	; 3
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <dtoa_prf+0x66>
    1436:	84 e0       	ldi	r24, 0x04	; 4
    1438:	81 17       	cp	r24, r17
    143a:	18 f4       	brcc	.+6      	; 0x1442 <dtoa_prf+0x70>
    143c:	21 2f       	mov	r18, r17
    143e:	28 1b       	sub	r18, r24
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <dtoa_prf+0x72>
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	51 11       	cpse	r21, r1
    1446:	0b c0       	rjmp	.+22     	; 0x145e <dtoa_prf+0x8c>
    1448:	f6 01       	movw	r30, r12
    144a:	82 2f       	mov	r24, r18
    144c:	30 e2       	ldi	r19, 0x20	; 32
    144e:	88 23       	and	r24, r24
    1450:	19 f0       	breq	.+6      	; 0x1458 <dtoa_prf+0x86>
    1452:	31 93       	st	Z+, r19
    1454:	81 50       	subi	r24, 0x01	; 1
    1456:	fb cf       	rjmp	.-10     	; 0x144e <dtoa_prf+0x7c>
    1458:	c2 0e       	add	r12, r18
    145a:	d1 1c       	adc	r13, r1
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	99 23       	and	r25, r25
    1460:	29 f0       	breq	.+10     	; 0x146c <dtoa_prf+0x9a>
    1462:	d6 01       	movw	r26, r12
    1464:	9c 93       	st	X, r25
    1466:	f6 01       	movw	r30, r12
    1468:	31 96       	adiw	r30, 0x01	; 1
    146a:	6f 01       	movw	r12, r30
    146c:	c6 01       	movw	r24, r12
    146e:	03 96       	adiw	r24, 0x03	; 3
    1470:	e2 fe       	sbrs	r14, 2
    1472:	0a c0       	rjmp	.+20     	; 0x1488 <dtoa_prf+0xb6>
    1474:	3e e4       	ldi	r19, 0x4E	; 78
    1476:	d6 01       	movw	r26, r12
    1478:	3c 93       	st	X, r19
    147a:	41 e4       	ldi	r20, 0x41	; 65
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	4c 93       	st	X, r20
    1480:	11 97       	sbiw	r26, 0x01	; 1
    1482:	12 96       	adiw	r26, 0x02	; 2
    1484:	3c 93       	st	X, r19
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <dtoa_prf+0xc2>
    1488:	3e e6       	ldi	r19, 0x6E	; 110
    148a:	f6 01       	movw	r30, r12
    148c:	30 83       	st	Z, r19
    148e:	41 e6       	ldi	r20, 0x61	; 97
    1490:	41 83       	std	Z+1, r20	; 0x01
    1492:	32 83       	std	Z+2, r19	; 0x02
    1494:	fc 01       	movw	r30, r24
    1496:	32 2f       	mov	r19, r18
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	33 23       	and	r19, r19
    149c:	09 f4       	brne	.+2      	; 0x14a0 <dtoa_prf+0xce>
    149e:	42 c0       	rjmp	.+132    	; 0x1524 <dtoa_prf+0x152>
    14a0:	41 93       	st	Z+, r20
    14a2:	31 50       	subi	r19, 0x01	; 1
    14a4:	fa cf       	rjmp	.-12     	; 0x149a <dtoa_prf+0xc8>
    14a6:	42 ff       	sbrs	r20, 2
    14a8:	44 c0       	rjmp	.+136    	; 0x1532 <dtoa_prf+0x160>
    14aa:	91 11       	cpse	r25, r1
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <dtoa_prf+0xe0>
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <dtoa_prf+0xe2>
    14b2:	84 e0       	ldi	r24, 0x04	; 4
    14b4:	81 17       	cp	r24, r17
    14b6:	18 f4       	brcc	.+6      	; 0x14be <dtoa_prf+0xec>
    14b8:	21 2f       	mov	r18, r17
    14ba:	28 1b       	sub	r18, r24
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <dtoa_prf+0xee>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	51 11       	cpse	r21, r1
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <dtoa_prf+0x108>
    14c4:	f6 01       	movw	r30, r12
    14c6:	82 2f       	mov	r24, r18
    14c8:	30 e2       	ldi	r19, 0x20	; 32
    14ca:	88 23       	and	r24, r24
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <dtoa_prf+0x102>
    14ce:	31 93       	st	Z+, r19
    14d0:	81 50       	subi	r24, 0x01	; 1
    14d2:	fb cf       	rjmp	.-10     	; 0x14ca <dtoa_prf+0xf8>
    14d4:	c2 0e       	add	r12, r18
    14d6:	d1 1c       	adc	r13, r1
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	99 23       	and	r25, r25
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <dtoa_prf+0x116>
    14de:	d6 01       	movw	r26, r12
    14e0:	9c 93       	st	X, r25
    14e2:	f6 01       	movw	r30, r12
    14e4:	31 96       	adiw	r30, 0x01	; 1
    14e6:	6f 01       	movw	r12, r30
    14e8:	c6 01       	movw	r24, r12
    14ea:	03 96       	adiw	r24, 0x03	; 3
    14ec:	e2 fe       	sbrs	r14, 2
    14ee:	0b c0       	rjmp	.+22     	; 0x1506 <dtoa_prf+0x134>
    14f0:	39 e4       	ldi	r19, 0x49	; 73
    14f2:	d6 01       	movw	r26, r12
    14f4:	3c 93       	st	X, r19
    14f6:	3e e4       	ldi	r19, 0x4E	; 78
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	3c 93       	st	X, r19
    14fc:	11 97       	sbiw	r26, 0x01	; 1
    14fe:	36 e4       	ldi	r19, 0x46	; 70
    1500:	12 96       	adiw	r26, 0x02	; 2
    1502:	3c 93       	st	X, r19
    1504:	07 c0       	rjmp	.+14     	; 0x1514 <dtoa_prf+0x142>
    1506:	39 e6       	ldi	r19, 0x69	; 105
    1508:	f6 01       	movw	r30, r12
    150a:	30 83       	st	Z, r19
    150c:	3e e6       	ldi	r19, 0x6E	; 110
    150e:	31 83       	std	Z+1, r19	; 0x01
    1510:	36 e6       	ldi	r19, 0x66	; 102
    1512:	32 83       	std	Z+2, r19	; 0x02
    1514:	fc 01       	movw	r30, r24
    1516:	32 2f       	mov	r19, r18
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	33 23       	and	r19, r19
    151c:	19 f0       	breq	.+6      	; 0x1524 <dtoa_prf+0x152>
    151e:	41 93       	st	Z+, r20
    1520:	31 50       	subi	r19, 0x01	; 1
    1522:	fb cf       	rjmp	.-10     	; 0x151a <dtoa_prf+0x148>
    1524:	fc 01       	movw	r30, r24
    1526:	e2 0f       	add	r30, r18
    1528:	f1 1d       	adc	r31, r1
    152a:	10 82       	st	Z, r1
    152c:	8e ef       	ldi	r24, 0xFE	; 254
    152e:	9f ef       	ldi	r25, 0xFF	; 255
    1530:	a6 c0       	rjmp	.+332    	; 0x167e <dtoa_prf+0x2ac>
    1532:	21 e0       	ldi	r18, 0x01	; 1
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	91 11       	cpse	r25, r1
    1538:	02 c0       	rjmp	.+4      	; 0x153e <dtoa_prf+0x16c>
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	16 16       	cp	r1, r22
    1540:	17 06       	cpc	r1, r23
    1542:	1c f4       	brge	.+6      	; 0x154a <dtoa_prf+0x178>
    1544:	fb 01       	movw	r30, r22
    1546:	31 96       	adiw	r30, 0x01	; 1
    1548:	02 c0       	rjmp	.+4      	; 0x154e <dtoa_prf+0x17c>
    154a:	e1 e0       	ldi	r30, 0x01	; 1
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	2e 0f       	add	r18, r30
    1550:	3f 1f       	adc	r19, r31
    1552:	bb 20       	and	r11, r11
    1554:	21 f0       	breq	.+8      	; 0x155e <dtoa_prf+0x18c>
    1556:	eb 2d       	mov	r30, r11
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	31 96       	adiw	r30, 0x01	; 1
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <dtoa_prf+0x190>
    155e:	e0 e0       	ldi	r30, 0x00	; 0
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	2e 0f       	add	r18, r30
    1564:	3f 1f       	adc	r19, r31
    1566:	e1 2f       	mov	r30, r17
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	2e 17       	cp	r18, r30
    156c:	3f 07       	cpc	r19, r31
    156e:	1c f4       	brge	.+6      	; 0x1576 <dtoa_prf+0x1a4>
    1570:	12 1b       	sub	r17, r18
    1572:	21 2f       	mov	r18, r17
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <dtoa_prf+0x1a6>
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	8e 2d       	mov	r24, r14
    157a:	88 71       	andi	r24, 0x18	; 24
    157c:	59 f4       	brne	.+22     	; 0x1594 <dtoa_prf+0x1c2>
    157e:	f6 01       	movw	r30, r12
    1580:	82 2f       	mov	r24, r18
    1582:	30 e2       	ldi	r19, 0x20	; 32
    1584:	88 23       	and	r24, r24
    1586:	19 f0       	breq	.+6      	; 0x158e <dtoa_prf+0x1bc>
    1588:	31 93       	st	Z+, r19
    158a:	81 50       	subi	r24, 0x01	; 1
    158c:	fb cf       	rjmp	.-10     	; 0x1584 <dtoa_prf+0x1b2>
    158e:	c2 0e       	add	r12, r18
    1590:	d1 1c       	adc	r13, r1
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	99 23       	and	r25, r25
    1596:	29 f0       	breq	.+10     	; 0x15a2 <dtoa_prf+0x1d0>
    1598:	d6 01       	movw	r26, r12
    159a:	9c 93       	st	X, r25
    159c:	f6 01       	movw	r30, r12
    159e:	31 96       	adiw	r30, 0x01	; 1
    15a0:	6f 01       	movw	r12, r30
    15a2:	51 11       	cpse	r21, r1
    15a4:	0b c0       	rjmp	.+22     	; 0x15bc <dtoa_prf+0x1ea>
    15a6:	f6 01       	movw	r30, r12
    15a8:	82 2f       	mov	r24, r18
    15aa:	90 e3       	ldi	r25, 0x30	; 48
    15ac:	88 23       	and	r24, r24
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <dtoa_prf+0x1e4>
    15b0:	91 93       	st	Z+, r25
    15b2:	81 50       	subi	r24, 0x01	; 1
    15b4:	fb cf       	rjmp	.-10     	; 0x15ac <dtoa_prf+0x1da>
    15b6:	c2 0e       	add	r12, r18
    15b8:	d1 1c       	adc	r13, r1
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	0f 2d       	mov	r16, r15
    15be:	06 0f       	add	r16, r22
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	34 2f       	mov	r19, r20
    15c4:	30 71       	andi	r19, 0x10	; 16
    15c6:	44 ff       	sbrs	r20, 4
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <dtoa_prf+0x1fe>
    15ca:	91 33       	cpi	r25, 0x31	; 49
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <dtoa_prf+0x1fe>
    15ce:	01 50       	subi	r16, 0x01	; 1
    15d0:	10 16       	cp	r1, r16
    15d2:	24 f4       	brge	.+8      	; 0x15dc <dtoa_prf+0x20a>
    15d4:	09 30       	cpi	r16, 0x09	; 9
    15d6:	18 f0       	brcs	.+6      	; 0x15de <dtoa_prf+0x20c>
    15d8:	08 e0       	ldi	r16, 0x08	; 8
    15da:	01 c0       	rjmp	.+2      	; 0x15de <dtoa_prf+0x20c>
    15dc:	01 e0       	ldi	r16, 0x01	; 1
    15de:	ab 01       	movw	r20, r22
    15e0:	77 ff       	sbrs	r23, 7
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <dtoa_prf+0x216>
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	fb 01       	movw	r30, r22
    15ea:	e4 1b       	sub	r30, r20
    15ec:	f5 0b       	sbc	r31, r21
    15ee:	a1 e0       	ldi	r26, 0x01	; 1
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ac 0f       	add	r26, r28
    15f4:	bd 1f       	adc	r27, r29
    15f6:	ea 0f       	add	r30, r26
    15f8:	fb 1f       	adc	r31, r27
    15fa:	8e e2       	ldi	r24, 0x2E	; 46
    15fc:	a8 2e       	mov	r10, r24
    15fe:	4b 01       	movw	r8, r22
    1600:	80 1a       	sub	r8, r16
    1602:	91 08       	sbc	r9, r1
    1604:	0b 2d       	mov	r16, r11
    1606:	10 e0       	ldi	r17, 0x00	; 0
    1608:	11 95       	neg	r17
    160a:	01 95       	neg	r16
    160c:	11 09       	sbc	r17, r1
    160e:	4f 3f       	cpi	r20, 0xFF	; 255
    1610:	bf ef       	ldi	r27, 0xFF	; 255
    1612:	5b 07       	cpc	r21, r27
    1614:	21 f4       	brne	.+8      	; 0x161e <dtoa_prf+0x24c>
    1616:	d6 01       	movw	r26, r12
    1618:	ac 92       	st	X, r10
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	6d 01       	movw	r12, r26
    161e:	64 17       	cp	r22, r20
    1620:	75 07       	cpc	r23, r21
    1622:	2c f0       	brlt	.+10     	; 0x162e <dtoa_prf+0x25c>
    1624:	84 16       	cp	r8, r20
    1626:	95 06       	cpc	r9, r21
    1628:	14 f4       	brge	.+4      	; 0x162e <dtoa_prf+0x25c>
    162a:	81 81       	ldd	r24, Z+1	; 0x01
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <dtoa_prf+0x25e>
    162e:	80 e3       	ldi	r24, 0x30	; 48
    1630:	41 50       	subi	r20, 0x01	; 1
    1632:	51 09       	sbc	r21, r1
    1634:	31 96       	adiw	r30, 0x01	; 1
    1636:	d6 01       	movw	r26, r12
    1638:	11 96       	adiw	r26, 0x01	; 1
    163a:	7d 01       	movw	r14, r26
    163c:	40 17       	cp	r20, r16
    163e:	51 07       	cpc	r21, r17
    1640:	24 f0       	brlt	.+8      	; 0x164a <dtoa_prf+0x278>
    1642:	d6 01       	movw	r26, r12
    1644:	8c 93       	st	X, r24
    1646:	67 01       	movw	r12, r14
    1648:	e2 cf       	rjmp	.-60     	; 0x160e <dtoa_prf+0x23c>
    164a:	64 17       	cp	r22, r20
    164c:	75 07       	cpc	r23, r21
    164e:	39 f4       	brne	.+14     	; 0x165e <dtoa_prf+0x28c>
    1650:	96 33       	cpi	r25, 0x36	; 54
    1652:	20 f4       	brcc	.+8      	; 0x165c <dtoa_prf+0x28a>
    1654:	95 33       	cpi	r25, 0x35	; 53
    1656:	19 f4       	brne	.+6      	; 0x165e <dtoa_prf+0x28c>
    1658:	31 11       	cpse	r19, r1
    165a:	01 c0       	rjmp	.+2      	; 0x165e <dtoa_prf+0x28c>
    165c:	81 e3       	ldi	r24, 0x31	; 49
    165e:	f6 01       	movw	r30, r12
    1660:	80 83       	st	Z, r24
    1662:	f7 01       	movw	r30, r14
    1664:	82 2f       	mov	r24, r18
    1666:	90 e2       	ldi	r25, 0x20	; 32
    1668:	88 23       	and	r24, r24
    166a:	19 f0       	breq	.+6      	; 0x1672 <dtoa_prf+0x2a0>
    166c:	91 93       	st	Z+, r25
    166e:	81 50       	subi	r24, 0x01	; 1
    1670:	fb cf       	rjmp	.-10     	; 0x1668 <dtoa_prf+0x296>
    1672:	f7 01       	movw	r30, r14
    1674:	e2 0f       	add	r30, r18
    1676:	f1 1d       	adc	r31, r1
    1678:	10 82       	st	Z, r1
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	29 96       	adiw	r28, 0x09	; 9
    1680:	ec e0       	ldi	r30, 0x0C	; 12
    1682:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__epilogue_restores__+0xc>

00001686 <__ftoa_engine>:
    1686:	28 30       	cpi	r18, 0x08	; 8
    1688:	08 f0       	brcs	.+2      	; 0x168c <__ftoa_engine+0x6>
    168a:	27 e0       	ldi	r18, 0x07	; 7
    168c:	33 27       	eor	r19, r19
    168e:	da 01       	movw	r26, r20
    1690:	99 0f       	add	r25, r25
    1692:	31 1d       	adc	r19, r1
    1694:	87 fd       	sbrc	r24, 7
    1696:	91 60       	ori	r25, 0x01	; 1
    1698:	00 96       	adiw	r24, 0x00	; 0
    169a:	61 05       	cpc	r22, r1
    169c:	71 05       	cpc	r23, r1
    169e:	39 f4       	brne	.+14     	; 0x16ae <__ftoa_engine+0x28>
    16a0:	32 60       	ori	r19, 0x02	; 2
    16a2:	2e 5f       	subi	r18, 0xFE	; 254
    16a4:	3d 93       	st	X+, r19
    16a6:	30 e3       	ldi	r19, 0x30	; 48
    16a8:	2a 95       	dec	r18
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <__ftoa_engine+0x1e>
    16ac:	08 95       	ret
    16ae:	9f 3f       	cpi	r25, 0xFF	; 255
    16b0:	30 f0       	brcs	.+12     	; 0x16be <__ftoa_engine+0x38>
    16b2:	80 38       	cpi	r24, 0x80	; 128
    16b4:	71 05       	cpc	r23, r1
    16b6:	61 05       	cpc	r22, r1
    16b8:	09 f0       	breq	.+2      	; 0x16bc <__ftoa_engine+0x36>
    16ba:	3c 5f       	subi	r19, 0xFC	; 252
    16bc:	3c 5f       	subi	r19, 0xFC	; 252
    16be:	3d 93       	st	X+, r19
    16c0:	91 30       	cpi	r25, 0x01	; 1
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <__ftoa_engine+0x40>
    16c4:	80 68       	ori	r24, 0x80	; 128
    16c6:	91 1d       	adc	r25, r1
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	1f 93       	push	r17
    16ce:	0f 93       	push	r16
    16d0:	ff 92       	push	r15
    16d2:	ef 92       	push	r14
    16d4:	19 2f       	mov	r17, r25
    16d6:	98 7f       	andi	r25, 0xF8	; 248
    16d8:	96 95       	lsr	r25
    16da:	e9 2f       	mov	r30, r25
    16dc:	96 95       	lsr	r25
    16de:	96 95       	lsr	r25
    16e0:	e9 0f       	add	r30, r25
    16e2:	ff 27       	eor	r31, r31
    16e4:	e2 55       	subi	r30, 0x52	; 82
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	99 27       	eor	r25, r25
    16ea:	33 27       	eor	r19, r19
    16ec:	ee 24       	eor	r14, r14
    16ee:	ff 24       	eor	r15, r15
    16f0:	a7 01       	movw	r20, r14
    16f2:	e7 01       	movw	r28, r14
    16f4:	05 90       	lpm	r0, Z+
    16f6:	08 94       	sec
    16f8:	07 94       	ror	r0
    16fa:	28 f4       	brcc	.+10     	; 0x1706 <__ftoa_engine+0x80>
    16fc:	36 0f       	add	r19, r22
    16fe:	e7 1e       	adc	r14, r23
    1700:	f8 1e       	adc	r15, r24
    1702:	49 1f       	adc	r20, r25
    1704:	51 1d       	adc	r21, r1
    1706:	66 0f       	add	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	06 94       	lsr	r0
    1710:	a1 f7       	brne	.-24     	; 0x16fa <__ftoa_engine+0x74>
    1712:	05 90       	lpm	r0, Z+
    1714:	07 94       	ror	r0
    1716:	28 f4       	brcc	.+10     	; 0x1722 <__ftoa_engine+0x9c>
    1718:	e7 0e       	add	r14, r23
    171a:	f8 1e       	adc	r15, r24
    171c:	49 1f       	adc	r20, r25
    171e:	56 1f       	adc	r21, r22
    1720:	c1 1d       	adc	r28, r1
    1722:	77 0f       	add	r23, r23
    1724:	88 1f       	adc	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	66 1f       	adc	r22, r22
    172a:	06 94       	lsr	r0
    172c:	a1 f7       	brne	.-24     	; 0x1716 <__ftoa_engine+0x90>
    172e:	05 90       	lpm	r0, Z+
    1730:	07 94       	ror	r0
    1732:	28 f4       	brcc	.+10     	; 0x173e <__ftoa_engine+0xb8>
    1734:	f8 0e       	add	r15, r24
    1736:	49 1f       	adc	r20, r25
    1738:	56 1f       	adc	r21, r22
    173a:	c7 1f       	adc	r28, r23
    173c:	d1 1d       	adc	r29, r1
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	66 1f       	adc	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	06 94       	lsr	r0
    1748:	a1 f7       	brne	.-24     	; 0x1732 <__ftoa_engine+0xac>
    174a:	05 90       	lpm	r0, Z+
    174c:	07 94       	ror	r0
    174e:	20 f4       	brcc	.+8      	; 0x1758 <__ftoa_engine+0xd2>
    1750:	49 0f       	add	r20, r25
    1752:	56 1f       	adc	r21, r22
    1754:	c7 1f       	adc	r28, r23
    1756:	d8 1f       	adc	r29, r24
    1758:	99 0f       	add	r25, r25
    175a:	66 1f       	adc	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	88 1f       	adc	r24, r24
    1760:	06 94       	lsr	r0
    1762:	a9 f7       	brne	.-22     	; 0x174e <__ftoa_engine+0xc8>
    1764:	84 91       	lpm	r24, Z
    1766:	10 95       	com	r17
    1768:	17 70       	andi	r17, 0x07	; 7
    176a:	41 f0       	breq	.+16     	; 0x177c <__ftoa_engine+0xf6>
    176c:	d6 95       	lsr	r29
    176e:	c7 95       	ror	r28
    1770:	57 95       	ror	r21
    1772:	47 95       	ror	r20
    1774:	f7 94       	ror	r15
    1776:	e7 94       	ror	r14
    1778:	1a 95       	dec	r17
    177a:	c1 f7       	brne	.-16     	; 0x176c <__ftoa_engine+0xe6>
    177c:	e4 e5       	ldi	r30, 0x54	; 84
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	68 94       	set
    1782:	15 90       	lpm	r1, Z+
    1784:	15 91       	lpm	r17, Z+
    1786:	35 91       	lpm	r19, Z+
    1788:	65 91       	lpm	r22, Z+
    178a:	95 91       	lpm	r25, Z+
    178c:	05 90       	lpm	r0, Z+
    178e:	7f e2       	ldi	r23, 0x2F	; 47
    1790:	73 95       	inc	r23
    1792:	e1 18       	sub	r14, r1
    1794:	f1 0a       	sbc	r15, r17
    1796:	43 0b       	sbc	r20, r19
    1798:	56 0b       	sbc	r21, r22
    179a:	c9 0b       	sbc	r28, r25
    179c:	d0 09       	sbc	r29, r0
    179e:	c0 f7       	brcc	.-16     	; 0x1790 <__ftoa_engine+0x10a>
    17a0:	e1 0c       	add	r14, r1
    17a2:	f1 1e       	adc	r15, r17
    17a4:	43 1f       	adc	r20, r19
    17a6:	56 1f       	adc	r21, r22
    17a8:	c9 1f       	adc	r28, r25
    17aa:	d0 1d       	adc	r29, r0
    17ac:	7e f4       	brtc	.+30     	; 0x17cc <__ftoa_engine+0x146>
    17ae:	70 33       	cpi	r23, 0x30	; 48
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <__ftoa_engine+0x130>
    17b2:	8a 95       	dec	r24
    17b4:	e6 cf       	rjmp	.-52     	; 0x1782 <__ftoa_engine+0xfc>
    17b6:	e8 94       	clt
    17b8:	01 50       	subi	r16, 0x01	; 1
    17ba:	30 f0       	brcs	.+12     	; 0x17c8 <__ftoa_engine+0x142>
    17bc:	08 0f       	add	r16, r24
    17be:	0a f4       	brpl	.+2      	; 0x17c2 <__ftoa_engine+0x13c>
    17c0:	00 27       	eor	r16, r16
    17c2:	02 17       	cp	r16, r18
    17c4:	08 f4       	brcc	.+2      	; 0x17c8 <__ftoa_engine+0x142>
    17c6:	20 2f       	mov	r18, r16
    17c8:	23 95       	inc	r18
    17ca:	02 2f       	mov	r16, r18
    17cc:	7a 33       	cpi	r23, 0x3A	; 58
    17ce:	28 f0       	brcs	.+10     	; 0x17da <__ftoa_engine+0x154>
    17d0:	79 e3       	ldi	r23, 0x39	; 57
    17d2:	7d 93       	st	X+, r23
    17d4:	2a 95       	dec	r18
    17d6:	e9 f7       	brne	.-6      	; 0x17d2 <__ftoa_engine+0x14c>
    17d8:	10 c0       	rjmp	.+32     	; 0x17fa <__ftoa_engine+0x174>
    17da:	7d 93       	st	X+, r23
    17dc:	2a 95       	dec	r18
    17de:	89 f6       	brne	.-94     	; 0x1782 <__ftoa_engine+0xfc>
    17e0:	06 94       	lsr	r0
    17e2:	97 95       	ror	r25
    17e4:	67 95       	ror	r22
    17e6:	37 95       	ror	r19
    17e8:	17 95       	ror	r17
    17ea:	17 94       	ror	r1
    17ec:	e1 18       	sub	r14, r1
    17ee:	f1 0a       	sbc	r15, r17
    17f0:	43 0b       	sbc	r20, r19
    17f2:	56 0b       	sbc	r21, r22
    17f4:	c9 0b       	sbc	r28, r25
    17f6:	d0 09       	sbc	r29, r0
    17f8:	98 f0       	brcs	.+38     	; 0x1820 <__ftoa_engine+0x19a>
    17fa:	23 95       	inc	r18
    17fc:	7e 91       	ld	r23, -X
    17fe:	73 95       	inc	r23
    1800:	7a 33       	cpi	r23, 0x3A	; 58
    1802:	08 f0       	brcs	.+2      	; 0x1806 <__ftoa_engine+0x180>
    1804:	70 e3       	ldi	r23, 0x30	; 48
    1806:	7c 93       	st	X, r23
    1808:	20 13       	cpse	r18, r16
    180a:	b8 f7       	brcc	.-18     	; 0x17fa <__ftoa_engine+0x174>
    180c:	7e 91       	ld	r23, -X
    180e:	70 61       	ori	r23, 0x10	; 16
    1810:	7d 93       	st	X+, r23
    1812:	30 f0       	brcs	.+12     	; 0x1820 <__ftoa_engine+0x19a>
    1814:	83 95       	inc	r24
    1816:	71 e3       	ldi	r23, 0x31	; 49
    1818:	7d 93       	st	X+, r23
    181a:	70 e3       	ldi	r23, 0x30	; 48
    181c:	2a 95       	dec	r18
    181e:	e1 f7       	brne	.-8      	; 0x1818 <__ftoa_engine+0x192>
    1820:	11 24       	eor	r1, r1
    1822:	ef 90       	pop	r14
    1824:	ff 90       	pop	r15
    1826:	0f 91       	pop	r16
    1828:	1f 91       	pop	r17
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	99 27       	eor	r25, r25
    1830:	87 fd       	sbrc	r24, 7
    1832:	90 95       	com	r25
    1834:	08 95       	ret

00001836 <__prologue_saves__>:
    1836:	2f 92       	push	r2
    1838:	3f 92       	push	r3
    183a:	4f 92       	push	r4
    183c:	5f 92       	push	r5
    183e:	6f 92       	push	r6
    1840:	7f 92       	push	r7
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	ca 1b       	sub	r28, r26
    1860:	db 0b       	sbc	r29, r27
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	09 94       	ijmp

0000186e <__epilogue_restores__>:
    186e:	2a 88       	ldd	r2, Y+18	; 0x12
    1870:	39 88       	ldd	r3, Y+17	; 0x11
    1872:	48 88       	ldd	r4, Y+16	; 0x10
    1874:	5f 84       	ldd	r5, Y+15	; 0x0f
    1876:	6e 84       	ldd	r6, Y+14	; 0x0e
    1878:	7d 84       	ldd	r7, Y+13	; 0x0d
    187a:	8c 84       	ldd	r8, Y+12	; 0x0c
    187c:	9b 84       	ldd	r9, Y+11	; 0x0b
    187e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1880:	b9 84       	ldd	r11, Y+9	; 0x09
    1882:	c8 84       	ldd	r12, Y+8	; 0x08
    1884:	df 80       	ldd	r13, Y+7	; 0x07
    1886:	ee 80       	ldd	r14, Y+6	; 0x06
    1888:	fd 80       	ldd	r15, Y+5	; 0x05
    188a:	0c 81       	ldd	r16, Y+4	; 0x04
    188c:	1b 81       	ldd	r17, Y+3	; 0x03
    188e:	aa 81       	ldd	r26, Y+2	; 0x02
    1890:	b9 81       	ldd	r27, Y+1	; 0x01
    1892:	ce 0f       	add	r28, r30
    1894:	d1 1d       	adc	r29, r1
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	ed 01       	movw	r28, r26
    18a2:	08 95       	ret

000018a4 <_exit>:
    18a4:	f8 94       	cli

000018a6 <__stop_program>:
    18a6:	ff cf       	rjmp	.-2      	; 0x18a6 <__stop_program>
