
Task3_Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000003a8  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a98  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077d  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00001769  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00001ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000297  00000000  00000000  0000253d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  8a:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:

 void ADC_init(){

 //Set reference voltage to be VCC

 ADMUX |=(1<<REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7

 //Choose PA1 as our analog input pin (ADC1)
 ADMUX |=(1<<MUX0);
  94:	38 9a       	sbi	0x07, 0	; 7

 //Left adjust ADC data for easier 8 bit reading
 ADMUX |=(1<<ADLAR) ;
  96:	3d 9a       	sbi	0x07, 5	; 7


  //Enable ADC
  ADCSRA |= (1<<ADEN);
  98:	37 9a       	sbi	0x06, 7	; 6
  
  //Set Pre-scaler value to 128 ( frequency = F_CPU/128 = 62.5KHz )
  ADCSRA |=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	86 b9       	out	0x06, r24	; 6
  
  //Enable ADC Interrupt
  ADCSRA |= (1<<ADIE);
  a0:	33 9a       	sbi	0x06, 3	; 6
  
  //Enable ADC auto-triggering
  ADCSRA |= (1<<ADATE);
  a2:	35 9a       	sbi	0x06, 5	; 6
  
  //Auto Triggering mode -> Timer/Counter 1 Compart Match B 
  SFIOR |= (1<<ADTS2) | (1<<ADTS0);
  a4:	80 b7       	in	r24, 0x30	; 48
  a6:	80 6a       	ori	r24, 0xA0	; 160
  a8:	80 bf       	out	0x30, r24	; 48
  aa:	08 95       	ret

000000ac <i2c_slave_init>:


void i2c_stop(){
//i2c STOP signal 
TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
TWCR &= ~(1<<TWSTA);
  ac:	90 e2       	ldi	r25, 0x20	; 32
  ae:	90 b9       	out	0x00, r25	; 0
  b0:	91 b1       	in	r25, 0x01	; 1
  b2:	9c 7f       	andi	r25, 0xFC	; 252
  b4:	91 b9       	out	0x01, r25	; 1
  b6:	82 b9       	out	0x02, r24	; 2
  b8:	86 b7       	in	r24, 0x36	; 54
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	86 bf       	out	0x36, r24	; 54
  be:	86 b7       	in	r24, 0x36	; 54
  c0:	84 6c       	ori	r24, 0xC4	; 196
  c2:	86 bf       	out	0x36, r24	; 54
  c4:	86 b7       	in	r24, 0x36	; 54
  c6:	8f 7c       	andi	r24, 0xCF	; 207
  c8:	86 bf       	out	0x36, r24	; 54
  ca:	08 95       	ret

000000cc <i2c_write>:
}


void i2c_write(unsigned char data){

TWDR = data;  
  cc:	83 b9       	out	0x03, r24	; 3
TWCR |= (1<<TWINT) | (TWEA);
  ce:	86 b7       	in	r24, 0x36	; 54
  d0:	86 68       	ori	r24, 0x86	; 134
  d2:	86 bf       	out	0x36, r24	; 54
  d4:	08 95       	ret

000000d6 <__vector_1>:

//Function prototype
void push_button();


ISR(INT0_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
   
   if(PIND & (1<<PD2))
  e2:	82 9b       	sbis	0x10, 2	; 16
  e4:	0a c0       	rjmp	.+20     	; 0xfa <__vector_1+0x24>
   {

   //Disable UART and enable i2c
   protocol =I2C;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <protocol>
   TWCR |= (1<<TWEN);
  ec:	86 b7       	in	r24, 0x36	; 54
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	86 bf       	out	0x36, r24	; 54
   UCSRB &= ~(1<<TXEN);
  f2:	53 98       	cbi	0x0a, 3	; 10
   
   // Testing pins
   PORTD |= (1<<PD5);
  f4:	95 9a       	sbi	0x12, 5	; 18
   PORTD &= ~(1<<PD6);
  f6:	96 98       	cbi	0x12, 6	; 18
  f8:	08 c0       	rjmp	.+16     	; 0x10a <__vector_1+0x34>
   }

   else {
   //Disable i2c and enable UART
   
   protocol=UART;
  fa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <protocol>
   TWCR &= ~(1<<TWEN);
  fe:	86 b7       	in	r24, 0x36	; 54
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	86 bf       	out	0x36, r24	; 54
   UCSRB |= (1<<TXEN);
 104:	53 9a       	sbi	0x0a, 3	; 10

   //Testing pins
   PORTD |= (1<<PD6);
 106:	96 9a       	sbi	0x12, 6	; 18
   PORTD &= ~(1<<PD5);
 108:	95 98       	cbi	0x12, 5	; 18
   }

}
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_16>:


ISR(ADC_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
  
  // Read ADC data
  reading = ADCH;
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  
  if(protocol==UART){
 13e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <protocol>
 142:	81 11       	cpse	r24, r1
 144:	05 c0       	rjmp	.+10     	; 0x150 <__vector_16+0x3a>
  wdt_reset();
 146:	a8 95       	wdr
  uart_write(reading);}
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14c:	0e 94 55 01 	call	0x2aa	; 0x2aa <uart_write>

}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_19>:

ISR(TWI_vect){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
  
  // Check status if the i2c bus and act accordingly
  switch(TWSR & TW_STATUS_MASK){
 194:	81 b1       	in	r24, 0x01	; 1
 196:	88 7f       	andi	r24, 0xF8	; 248
 198:	88 3b       	cpi	r24, 0xB8	; 184
 19a:	79 f0       	breq	.+30     	; 0x1ba <__vector_19+0x48>
 19c:	18 f4       	brcc	.+6      	; 0x1a4 <__vector_19+0x32>
 19e:	88 3a       	cpi	r24, 0xA8	; 168
 1a0:	31 f0       	breq	.+12     	; 0x1ae <__vector_19+0x3c>
 1a2:	1b c0       	rjmp	.+54     	; 0x1da <__vector_19+0x68>
 1a4:	80 3c       	cpi	r24, 0xC0	; 192
 1a6:	79 f0       	breq	.+30     	; 0x1c6 <__vector_19+0x54>
 1a8:	88 3c       	cpi	r24, 0xC8	; 200
 1aa:	91 f0       	breq	.+36     	; 0x1d0 <__vector_19+0x5e>
 1ac:	16 c0       	rjmp	.+44     	; 0x1da <__vector_19+0x68>
    
    // Slave address acknowledged, data byte will be transmitted
    case TW_ST_SLA_ACK :
    wdt_reset();
 1ae:	a8 95       	wdr
    i2c_write(reading);
 1b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	0e 94 66 00 	call	0xcc	; 0xcc <i2c_write>
    break;
 1b8:	11 c0       	rjmp	.+34     	; 0x1dc <__vector_19+0x6a>

    // Data byte acknowledged, sending another data byte
    case TW_ST_DATA_ACK :
    wdt_reset();
 1ba:	a8 95       	wdr
    i2c_write(reading);
 1bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	0e 94 66 00 	call	0xcc	; 0xcc <i2c_write>
    break;
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <__vector_19+0x6a>

    // Data byte received and NACK returned
    case TW_ST_DATA_NACK :
    TWCR |= (1<<TWINT) | (1<<TWEA);
 1c6:	86 b7       	in	r24, 0x36	; 54
 1c8:	80 6c       	ori	r24, 0xC0	; 192
 1ca:	86 bf       	out	0x36, r24	; 54
    wdt_reset();
 1cc:	a8 95       	wdr
    break;
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <__vector_19+0x6a>

    // Data byte received and Stop signal returned
    case TW_ST_LAST_DATA :
    TWCR |= (1<<TWINT) | (1<<TWEA);
 1d0:	86 b7       	in	r24, 0x36	; 54
 1d2:	80 6c       	ori	r24, 0xC0	; 192
 1d4:	86 bf       	out	0x36, r24	; 54
    wdt_reset();
 1d6:	a8 95       	wdr
    break;
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <__vector_19+0x6a>

    default:
    wdt_reset();
 1da:	a8 95       	wdr
    break;

  }

}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <push_button>:


void push_button(){

  // SET PD2 as input
  DDRD &= ~(1<<PD2);
 1fe:	8a 98       	cbi	0x11, 2	; 17
  
  // Enable external interrupt at PD2 ( INT0 )
  GICR |= (1<<INT0);
 200:	8b b7       	in	r24, 0x3b	; 59
 202:	80 64       	ori	r24, 0x40	; 64
 204:	8b bf       	out	0x3b, r24	; 59
  
  // Any logical change will generate an interrupt request
  MCUCR |= (1<<ISC00);
 206:	85 b7       	in	r24, 0x35	; 53
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	85 bf       	out	0x35, r24	; 53
 20c:	08 95       	ret

0000020e <main>:
int main(void)
{


  //Check watchdog timer status
  if(MCUCSR&(1<<WDRF))
 20e:	04 b6       	in	r0, 0x34	; 52
 210:	03 fc       	sbrc	r0, 3
  {
    //Clear Watchdog reset pin
    WatchDog_clear();
 212:	0e 94 37 01 	call	0x26e	; 0x26e <WatchDog_clear>
  }


  //UART init
  uart_init(9600);
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	95 e2       	ldi	r25, 0x25	; 37
 21a:	0e 94 49 01 	call	0x292	; 0x292 <uart_init>

  //I2c Slave address
  uint8_t ui8_address = 0x21;

  // Initialize ADC Module
  ADC_init();
 21e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>

  // initialize I2C slave Protocol
  i2c_slave_init(ui8_address);
 222:	81 e2       	ldi	r24, 0x21	; 33
 224:	0e 94 56 00 	call	0xac	; 0xac <i2c_slave_init>

  //Push button function init
  push_button();
 228:	0e 94 ff 00 	call	0x1fe	; 0x1fe <push_button>

  //Initialize timer 1
  timer1_init();
 22c:	0e 94 20 01 	call	0x240	; 0x240 <timer1_init>

  // set pins PD5, PD6 as output for testing
  DDRD |= (1<<DDD5) | (1<<DDD6);
 230:	81 b3       	in	r24, 0x11	; 17
 232:	80 66       	ori	r24, 0x60	; 96
 234:	81 bb       	out	0x11, r24	; 17

  //Start ADC conversion
  ADCSRA |= (1<<ADSC);  
 236:	36 9a       	sbi	0x06, 6	; 6

  //Enable watchdog timer
  WatchDog_on();
 238:	0e 94 30 01 	call	0x260	; 0x260 <WatchDog_on>

  //Enable Global Interrupt
  sei();
 23c:	78 94       	sei
 23e:	ff cf       	rjmp	.-2      	; 0x23e <main+0x30>

00000240 <timer1_init>:


 void timer1_init()
 {
	 // set up timer with Pre-scaler = 256 
	 TCCR1B |= (1 << WGM12);
 240:	8e b5       	in	r24, 0x2e	; 46
 242:	88 60       	ori	r24, 0x08	; 8
 244:	8e bd       	out	0x2e, r24	; 46

	 //Setup CTC Mode
	 TCCR1B |= (1 << CS12);
 246:	8e b5       	in	r24, 0x2e	; 46
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	8e bd       	out	0x2e, r24	; 46

	 //Enable interrupt
	 TIMSK |= (1<<OCIE1B);
 24c:	89 b7       	in	r24, 0x39	; 57
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	89 bf       	out	0x39, r24	; 57
	 
	 // initialize counter
	 TCNT1 = 0;
 252:	1d bc       	out	0x2d, r1	; 45
 254:	1c bc       	out	0x2c, r1	; 44
	 
	 // initialize compare value --> Required delay of 500ms at frequecy of F_CPU/256  // TODO : Replace number with equation
	 OCR1A = 15624;
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	9d e3       	ldi	r25, 0x3D	; 61
 25a:	9b bd       	out	0x2b, r25	; 43
 25c:	8a bd       	out	0x2a, r24	; 42
 25e:	08 95       	ret

00000260 <WatchDog_on>:


  void WatchDog_on ()
  {
    //Enable watchdog timer
    WDTCR |= (1<<WDE);
 260:	81 b5       	in	r24, 0x21	; 33
 262:	88 60       	ori	r24, 0x08	; 8
 264:	81 bd       	out	0x21, r24	; 33
    
    
    //Set timeout period to be 2.1s
    WDTCR |= (1<<WDP0) | (1<<WDP1) | (1<<WDP2);
 266:	81 b5       	in	r24, 0x21	; 33
 268:	87 60       	ori	r24, 0x07	; 7
 26a:	81 bd       	out	0x21, r24	; 33
 26c:	08 95       	ret

0000026e <WatchDog_clear>:


  void WatchDog_clear()
  {
    
    MCUCSR &= ~(1<<WDRF);
 26e:	84 b7       	in	r24, 0x34	; 52
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	84 bf       	out	0x34, r24	; 52
 274:	08 95       	ret

00000276 <baud_rate>:

 // Value to be calculated that corresponds to required baud rate
 uint16_t UBRR=0;	

 // Calculate UBRR value for the micro-controller
 UBRR = (F_CPU/baud_val)-1;	
 276:	9c 01       	movw	r18, r24
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	72 e1       	ldi	r23, 0x12	; 18
 280:	8a e7       	ldi	r24, 0x7A	; 122
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 57 01 	call	0x2ae	; 0x2ae <__divmodsi4>
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	31 09       	sbc	r19, r1

 // Split the value into the higher and lower UBRR bits
 UBRRH = (UBRR >> 8);
 28c:	30 bd       	out	0x20, r19	; 32
 UBRRL = UBRR; 
 28e:	29 b9       	out	0x09, r18	; 9
 290:	08 95       	ret

00000292 <uart_init>:


 void uart_init(uint16_t baud_val){

 // Enable UART reception and transmission
 UCSRB |= (1<<RXEN) | (1<<TXEN);
 292:	2a b1       	in	r18, 0x0a	; 10
 294:	28 61       	ori	r18, 0x18	; 24
 296:	2a b9       	out	0x0a, r18	; 10

 // Set frame format : 8 data bits, 2 stop bits

 UCSRC |= (1<<URSEL) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0);
 298:	20 b5       	in	r18, 0x20	; 32
 29a:	2e 68       	ori	r18, 0x8E	; 142
 29c:	20 bd       	out	0x20, r18	; 32

 //Set Parity bits
 UCSRC |= (1<<UPM1) | (1<<UPM0);
 29e:	20 b5       	in	r18, 0x20	; 32
 2a0:	20 63       	ori	r18, 0x30	; 48
 2a2:	20 bd       	out	0x20, r18	; 32

 //Set baud_Rate
 baud_rate(baud_val);
 2a4:	0e 94 3b 01 	call	0x276	; 0x276 <baud_rate>
 2a8:	08 95       	ret

000002aa <uart_write>:

//Wait for empty transmit buffer
//while ( !(UCSRA & (1<<UDRE) ) );

//Put data into buffer
UDR = send;
 2aa:	8c b9       	out	0x0c, r24	; 12
 2ac:	08 95       	ret

000002ae <__divmodsi4>:
 2ae:	05 2e       	mov	r0, r21
 2b0:	97 fb       	bst	r25, 7
 2b2:	1e f4       	brtc	.+6      	; 0x2ba <__divmodsi4+0xc>
 2b4:	00 94       	com	r0
 2b6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__negsi2>
 2ba:	57 fd       	sbrc	r21, 7
 2bc:	07 d0       	rcall	.+14     	; 0x2cc <__divmodsi4_neg2>
 2be:	0e 94 76 01 	call	0x2ec	; 0x2ec <__udivmodsi4>
 2c2:	07 fc       	sbrc	r0, 7
 2c4:	03 d0       	rcall	.+6      	; 0x2cc <__divmodsi4_neg2>
 2c6:	4e f4       	brtc	.+18     	; 0x2da <__divmodsi4_exit>
 2c8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__negsi2>

000002cc <__divmodsi4_neg2>:
 2cc:	50 95       	com	r21
 2ce:	40 95       	com	r20
 2d0:	30 95       	com	r19
 2d2:	21 95       	neg	r18
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	4f 4f       	sbci	r20, 0xFF	; 255
 2d8:	5f 4f       	sbci	r21, 0xFF	; 255

000002da <__divmodsi4_exit>:
 2da:	08 95       	ret

000002dc <__negsi2>:
 2dc:	90 95       	com	r25
 2de:	80 95       	com	r24
 2e0:	70 95       	com	r23
 2e2:	61 95       	neg	r22
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	08 95       	ret

000002ec <__udivmodsi4>:
 2ec:	a1 e2       	ldi	r26, 0x21	; 33
 2ee:	1a 2e       	mov	r1, r26
 2f0:	aa 1b       	sub	r26, r26
 2f2:	bb 1b       	sub	r27, r27
 2f4:	fd 01       	movw	r30, r26
 2f6:	0d c0       	rjmp	.+26     	; 0x312 <__udivmodsi4_ep>

000002f8 <__udivmodsi4_loop>:
 2f8:	aa 1f       	adc	r26, r26
 2fa:	bb 1f       	adc	r27, r27
 2fc:	ee 1f       	adc	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	a2 17       	cp	r26, r18
 302:	b3 07       	cpc	r27, r19
 304:	e4 07       	cpc	r30, r20
 306:	f5 07       	cpc	r31, r21
 308:	20 f0       	brcs	.+8      	; 0x312 <__udivmodsi4_ep>
 30a:	a2 1b       	sub	r26, r18
 30c:	b3 0b       	sbc	r27, r19
 30e:	e4 0b       	sbc	r30, r20
 310:	f5 0b       	sbc	r31, r21

00000312 <__udivmodsi4_ep>:
 312:	66 1f       	adc	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	1a 94       	dec	r1
 31c:	69 f7       	brne	.-38     	; 0x2f8 <__udivmodsi4_loop>
 31e:	60 95       	com	r22
 320:	70 95       	com	r23
 322:	80 95       	com	r24
 324:	90 95       	com	r25
 326:	9b 01       	movw	r18, r22
 328:	ac 01       	movw	r20, r24
 32a:	bd 01       	movw	r22, r26
 32c:	cf 01       	movw	r24, r30
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
