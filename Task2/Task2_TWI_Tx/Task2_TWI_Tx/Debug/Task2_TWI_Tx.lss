
Task2_TWI_Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000534  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000933  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e1  00000000  00000000  00000fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d0  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ee  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b0  00000000  00000000  000021ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000237a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  74:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:

void ADC_init(){

 //Set reference voltage to be VCC

 ADMUX |=(1<<REFS0);
  7c:	3e 9a       	sbi	0x07, 6	; 7

 //Choose PA1 as our analog input pin (ADC1)
 ADMUX |=(1<<MUX0);
  7e:	38 9a       	sbi	0x07, 0	; 7

 //Left adjust ADC data for easier 8 bit reading
 ADMUX |=(1<<ADLAR) ;
  80:	3d 9a       	sbi	0x07, 5	; 7


  //Enable ADC
  ADCSRA |= (1<<ADEN);
  82:	37 9a       	sbi	0x06, 7	; 6
  
  //Set Pre-scaler value to 128 ( frequency = F_CPU/128 = 62.5KHz )
  ADCSRA |=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  84:	86 b1       	in	r24, 0x06	; 6
  86:	87 60       	ori	r24, 0x07	; 7
  88:	86 b9       	out	0x06, r24	; 6
  
  //Enable ADC Interrupt
  ADCSRA |= (1<<ADIE);
  8a:	33 9a       	sbi	0x06, 3	; 6
  
  //Enable ADC auto-triggering
  ADCSRA |= (1<<ADATE);
  8c:	35 9a       	sbi	0x06, 5	; 6
  
  //Auto Triggering mode -> Timer/Counter 1 Compart Match B 
  SFIOR |= (1<<ADTS2) | (1<<ADTS0);
  8e:	80 b7       	in	r24, 0x30	; 48
  90:	80 6a       	ori	r24, 0xA0	; 160
  92:	80 bf       	out	0x30, r24	; 48
  94:	08 95       	ret

00000096 <ADC_start>:


 void ADC_start(){

 //Start conversion
ADCSRA |= (1<<ADSC);
  96:	36 9a       	sbi	0x06, 6	; 6
  98:	08 95       	ret

0000009a <i2c_slave_init>:


void i2c_stop(){
//i2c STOP signal 
TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
TWCR &= ~(1<<TWSTA);
  9a:	90 e2       	ldi	r25, 0x20	; 32
  9c:	90 b9       	out	0x00, r25	; 0
  9e:	91 b1       	in	r25, 0x01	; 1
  a0:	9c 7f       	andi	r25, 0xFC	; 252
  a2:	91 b9       	out	0x01, r25	; 1
  a4:	82 b9       	out	0x02, r24	; 2
  a6:	86 b7       	in	r24, 0x36	; 54
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	86 bf       	out	0x36, r24	; 54
  ac:	86 b7       	in	r24, 0x36	; 54
  ae:	84 6c       	ori	r24, 0xC4	; 196
  b0:	86 bf       	out	0x36, r24	; 54
  b2:	86 b7       	in	r24, 0x36	; 54
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	86 bf       	out	0x36, r24	; 54
  b8:	08 95       	ret

000000ba <i2c_write>:
}


void i2c_write(unsigned char data){

TWDR = data;  
  ba:	83 b9       	out	0x03, r24	; 3
TWCR |= (1<<TWINT) | (TWEA);
  bc:	86 b7       	in	r24, 0x36	; 54
  be:	86 68       	ori	r24, 0x86	; 134
  c0:	86 bf       	out	0x36, r24	; 54
  c2:	08 95       	ret

000000c4 <__vector_16>:
#include <avr/wdt.h>

//Variable to store ADC values
volatile uint8_t reading=0;

 ISR(ADC_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
   
  // Read ADC data
  reading = ADCH;
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

 }
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_19>:

 ISR(TWI_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
   // Check status of the i2c bus and act accordingly ( Actions are described by the datasheet)
   switch(TWSR & TW_STATUS_MASK){
 104:	81 b1       	in	r24, 0x01	; 1
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	88 3b       	cpi	r24, 0xB8	; 184
 10a:	99 f0       	breq	.+38     	; 0x132 <__vector_19+0x50>
 10c:	18 f4       	brcc	.+6      	; 0x114 <__vector_19+0x32>
 10e:	88 3a       	cpi	r24, 0xA8	; 168
 110:	31 f0       	breq	.+12     	; 0x11e <__vector_19+0x3c>
 112:	23 c0       	rjmp	.+70     	; 0x15a <__vector_19+0x78>
 114:	80 3c       	cpi	r24, 0xC0	; 192
 116:	b9 f0       	breq	.+46     	; 0x146 <__vector_19+0x64>
 118:	88 3c       	cpi	r24, 0xC8	; 200
 11a:	d1 f0       	breq	.+52     	; 0x150 <__vector_19+0x6e>
 11c:	1e c0       	rjmp	.+60     	; 0x15a <__vector_19+0x78>
     
     // Slave address acknowledged, data byte will be transmitted 
     case TW_ST_SLA_ACK :
     PORTD ^= (1<<PD5);               //pin toggling For testing
 11e:	92 b3       	in	r25, 0x12	; 18
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	89 27       	eor	r24, r25
 124:	82 bb       	out	0x12, r24	; 18
     wdt_reset();
 126:	a8 95       	wdr
     i2c_write(reading);
 128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	0e 94 5d 00 	call	0xba	; 0xba <i2c_write>
     break;
 130:	15 c0       	rjmp	.+42     	; 0x15c <__vector_19+0x7a>

     // Data byte acknowledged, sending another data byte
     case TW_ST_DATA_ACK :
     PORTD ^= (1<<PD6);               //pin toggling For testing
 132:	92 b3       	in	r25, 0x12	; 18
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	89 27       	eor	r24, r25
 138:	82 bb       	out	0x12, r24	; 18
     wdt_reset();
 13a:	a8 95       	wdr
     i2c_write(reading);
 13c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 140:	0e 94 5d 00 	call	0xba	; 0xba <i2c_write>
     break;
 144:	0b c0       	rjmp	.+22     	; 0x15c <__vector_19+0x7a>

     // Data byte received and NACK returned 
     case TW_ST_DATA_NACK :   
     TWCR |= (1<<TWINT) | (1<<TWEA);
 146:	86 b7       	in	r24, 0x36	; 54
 148:	80 6c       	ori	r24, 0xC0	; 192
 14a:	86 bf       	out	0x36, r24	; 54
     wdt_reset();
 14c:	a8 95       	wdr
     break;
 14e:	06 c0       	rjmp	.+12     	; 0x15c <__vector_19+0x7a>

     // Data byte received and Stop signal returned  
     case TW_ST_LAST_DATA :
     TWCR |= (1<<TWINT) | (1<<TWEA);
 150:	86 b7       	in	r24, 0x36	; 54
 152:	80 6c       	ori	r24, 0xC0	; 192
 154:	86 bf       	out	0x36, r24	; 54
     wdt_reset();
 156:	a8 95       	wdr
     break;
 158:	01 c0       	rjmp	.+2      	; 0x15c <__vector_19+0x7a>

     default:
     wdt_reset();  
 15a:	a8 95       	wdr
   }




 }
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:
int main(void)
{


  //Check watchdog timer status
  if(MCUCSR&(1<<WDRF))
 17e:	04 b6       	in	r0, 0x34	; 52
 180:	03 fc       	sbrc	r0, 3
  {
    //Clear Watchdog reset pin
    WatchDog_clear();
 182:	0e 94 00 01 	call	0x200	; 0x200 <WatchDog_clear>

  //I2c Slave address
	uint8_t ui8_address = 0x21;

	// Initialize ADC Module
	ADC_init();
 186:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>

	// initialize I2C slave Protocol //TODO
	i2c_slave_init(ui8_address);
 18a:	81 e2       	ldi	r24, 0x21	; 33
 18c:	0e 94 4d 00 	call	0x9a	; 0x9a <i2c_slave_init>

	//Initialize timer 1 -- Pass required time interval in seconds
	timer1_init(0.5);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	9f e3       	ldi	r25, 0x3F	; 63
 198:	0e 94 d7 00 	call	0x1ae	; 0x1ae <timer1_init>

	// set pins PD5, PD6 as output for testing
	DDRD |= (1<<DDD5) | (1<<DDD6);
 19c:	81 b3       	in	r24, 0x11	; 17
 19e:	80 66       	ori	r24, 0x60	; 96
 1a0:	81 bb       	out	0x11, r24	; 17

	//Start ADC conversion
	ADC_start();
 1a2:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_start>

  //Enable watchdog timer
  WatchDog_on();
 1a6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <WatchDog_on>

	//Enable Global Interrupt
	sei();
 1aa:	78 94       	sei
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <main+0x2e>

000001ae <timer1_init>:


 void timer1_init(float delay)
 {
	 // set up timer with Pre-scaler = 256 
	 TCCR1B |= (1 << WGM12);
 1ae:	2e b5       	in	r18, 0x2e	; 46
 1b0:	28 60       	ori	r18, 0x08	; 8
 1b2:	2e bd       	out	0x2e, r18	; 46

	 //Setup CTC Mode
	 TCCR1B |= (1 << CS12);
 1b4:	2e b5       	in	r18, 0x2e	; 46
 1b6:	24 60       	ori	r18, 0x04	; 4
 1b8:	2e bd       	out	0x2e, r18	; 46

	 //Enable interrupt
	 TIMSK |= (1<<OCIE1B);
 1ba:	29 b7       	in	r18, 0x39	; 57
 1bc:	28 60       	ori	r18, 0x08	; 8
 1be:	29 bf       	out	0x39, r18	; 57
	 
	 // initialize counter
	 TCNT1 = 0;
 1c0:	1d bc       	out	0x2d, r1	; 45
 1c2:	1c bc       	out	0x2c, r1	; 44
	 
	 // initialize compare value --> Required delay of 500ms at frequecy of F_CPU/256
	 //OCR1A = 15624 (ticks)
	 OCR1A = ((delay*F_CPU)/256)-1;
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	34 e2       	ldi	r19, 0x24	; 36
 1c8:	44 ef       	ldi	r20, 0xF4	; 244
 1ca:	5a e4       	ldi	r21, 0x4A	; 74
 1cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__mulsf3>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e8       	ldi	r20, 0x80	; 128
 1d6:	5b e3       	ldi	r21, 0x3B	; 59
 1d8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__mulsf3>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e8       	ldi	r20, 0x80	; 128
 1e2:	5f e3       	ldi	r21, 0x3F	; 63
 1e4:	0e 94 04 01 	call	0x208	; 0x208 <__subsf3>
 1e8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__fixunssfsi>
 1ec:	7b bd       	out	0x2b, r23	; 43
 1ee:	6a bd       	out	0x2a, r22	; 42
 1f0:	08 95       	ret

000001f2 <WatchDog_on>:


  void WatchDog_on ()
  {
    //Enable watchdog timer
    WDTCR |= (1<<WDE);
 1f2:	81 b5       	in	r24, 0x21	; 33
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	81 bd       	out	0x21, r24	; 33
    
    
    //Set timeout period to be 2.1s
    WDTCR |= (1<<WDP0) | (1<<WDP1) | (1<<WDP2);
 1f8:	81 b5       	in	r24, 0x21	; 33
 1fa:	87 60       	ori	r24, 0x07	; 7
 1fc:	81 bd       	out	0x21, r24	; 33
 1fe:	08 95       	ret

00000200 <WatchDog_clear>:


  void WatchDog_clear()
  {
    
    MCUCSR &= ~(1<<WDRF);
 200:	84 b7       	in	r24, 0x34	; 52
 202:	87 7f       	andi	r24, 0xF7	; 247
 204:	84 bf       	out	0x34, r24	; 52
 206:	08 95       	ret

00000208 <__subsf3>:
 208:	50 58       	subi	r21, 0x80	; 128

0000020a <__addsf3>:
 20a:	bb 27       	eor	r27, r27
 20c:	aa 27       	eor	r26, r26
 20e:	0e 94 1c 01 	call	0x238	; 0x238 <__addsf3x>
 212:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_round>
 216:	0e 94 a9 01 	call	0x352	; 0x352 <__fp_pscA>
 21a:	38 f0       	brcs	.+14     	; 0x22a <__addsf3+0x20>
 21c:	0e 94 b0 01 	call	0x360	; 0x360 <__fp_pscB>
 220:	20 f0       	brcs	.+8      	; 0x22a <__addsf3+0x20>
 222:	39 f4       	brne	.+14     	; 0x232 <__addsf3+0x28>
 224:	9f 3f       	cpi	r25, 0xFF	; 255
 226:	19 f4       	brne	.+6      	; 0x22e <__addsf3+0x24>
 228:	26 f4       	brtc	.+8      	; 0x232 <__addsf3+0x28>
 22a:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__fp_nan>
 22e:	0e f4       	brtc	.+2      	; 0x232 <__addsf3+0x28>
 230:	e0 95       	com	r30
 232:	e7 fb       	bst	r30, 7
 234:	0c 94 a0 01 	jmp	0x340	; 0x340 <__fp_inf>

00000238 <__addsf3x>:
 238:	e9 2f       	mov	r30, r25
 23a:	0e 94 c8 01 	call	0x390	; 0x390 <__fp_split3>
 23e:	58 f3       	brcs	.-42     	; 0x216 <__addsf3+0xc>
 240:	ba 17       	cp	r27, r26
 242:	62 07       	cpc	r22, r18
 244:	73 07       	cpc	r23, r19
 246:	84 07       	cpc	r24, r20
 248:	95 07       	cpc	r25, r21
 24a:	20 f0       	brcs	.+8      	; 0x254 <__addsf3x+0x1c>
 24c:	79 f4       	brne	.+30     	; 0x26c <__addsf3x+0x34>
 24e:	a6 f5       	brtc	.+104    	; 0x2b8 <__addsf3x+0x80>
 250:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__fp_zero>
 254:	0e f4       	brtc	.+2      	; 0x258 <__addsf3x+0x20>
 256:	e0 95       	com	r30
 258:	0b 2e       	mov	r0, r27
 25a:	ba 2f       	mov	r27, r26
 25c:	a0 2d       	mov	r26, r0
 25e:	0b 01       	movw	r0, r22
 260:	b9 01       	movw	r22, r18
 262:	90 01       	movw	r18, r0
 264:	0c 01       	movw	r0, r24
 266:	ca 01       	movw	r24, r20
 268:	a0 01       	movw	r20, r0
 26a:	11 24       	eor	r1, r1
 26c:	ff 27       	eor	r31, r31
 26e:	59 1b       	sub	r21, r25
 270:	99 f0       	breq	.+38     	; 0x298 <__addsf3x+0x60>
 272:	59 3f       	cpi	r21, 0xF9	; 249
 274:	50 f4       	brcc	.+20     	; 0x28a <__addsf3x+0x52>
 276:	50 3e       	cpi	r21, 0xE0	; 224
 278:	68 f1       	brcs	.+90     	; 0x2d4 <__addsf3x+0x9c>
 27a:	1a 16       	cp	r1, r26
 27c:	f0 40       	sbci	r31, 0x00	; 0
 27e:	a2 2f       	mov	r26, r18
 280:	23 2f       	mov	r18, r19
 282:	34 2f       	mov	r19, r20
 284:	44 27       	eor	r20, r20
 286:	58 5f       	subi	r21, 0xF8	; 248
 288:	f3 cf       	rjmp	.-26     	; 0x270 <__addsf3x+0x38>
 28a:	46 95       	lsr	r20
 28c:	37 95       	ror	r19
 28e:	27 95       	ror	r18
 290:	a7 95       	ror	r26
 292:	f0 40       	sbci	r31, 0x00	; 0
 294:	53 95       	inc	r21
 296:	c9 f7       	brne	.-14     	; 0x28a <__addsf3x+0x52>
 298:	7e f4       	brtc	.+30     	; 0x2b8 <__addsf3x+0x80>
 29a:	1f 16       	cp	r1, r31
 29c:	ba 0b       	sbc	r27, r26
 29e:	62 0b       	sbc	r22, r18
 2a0:	73 0b       	sbc	r23, r19
 2a2:	84 0b       	sbc	r24, r20
 2a4:	ba f0       	brmi	.+46     	; 0x2d4 <__addsf3x+0x9c>
 2a6:	91 50       	subi	r25, 0x01	; 1
 2a8:	a1 f0       	breq	.+40     	; 0x2d2 <__addsf3x+0x9a>
 2aa:	ff 0f       	add	r31, r31
 2ac:	bb 1f       	adc	r27, r27
 2ae:	66 1f       	adc	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	88 1f       	adc	r24, r24
 2b4:	c2 f7       	brpl	.-16     	; 0x2a6 <__addsf3x+0x6e>
 2b6:	0e c0       	rjmp	.+28     	; 0x2d4 <__addsf3x+0x9c>
 2b8:	ba 0f       	add	r27, r26
 2ba:	62 1f       	adc	r22, r18
 2bc:	73 1f       	adc	r23, r19
 2be:	84 1f       	adc	r24, r20
 2c0:	48 f4       	brcc	.+18     	; 0x2d4 <__addsf3x+0x9c>
 2c2:	87 95       	ror	r24
 2c4:	77 95       	ror	r23
 2c6:	67 95       	ror	r22
 2c8:	b7 95       	ror	r27
 2ca:	f7 95       	ror	r31
 2cc:	9e 3f       	cpi	r25, 0xFE	; 254
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <__addsf3x+0x9a>
 2d0:	b0 cf       	rjmp	.-160    	; 0x232 <__addsf3+0x28>
 2d2:	93 95       	inc	r25
 2d4:	88 0f       	add	r24, r24
 2d6:	08 f0       	brcs	.+2      	; 0x2da <__addsf3x+0xa2>
 2d8:	99 27       	eor	r25, r25
 2da:	ee 0f       	add	r30, r30
 2dc:	97 95       	ror	r25
 2de:	87 95       	ror	r24
 2e0:	08 95       	ret

000002e2 <__fixunssfsi>:
 2e2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_splitA>
 2e6:	88 f0       	brcs	.+34     	; 0x30a <__fixunssfsi+0x28>
 2e8:	9f 57       	subi	r25, 0x7F	; 127
 2ea:	98 f0       	brcs	.+38     	; 0x312 <__fixunssfsi+0x30>
 2ec:	b9 2f       	mov	r27, r25
 2ee:	99 27       	eor	r25, r25
 2f0:	b7 51       	subi	r27, 0x17	; 23
 2f2:	b0 f0       	brcs	.+44     	; 0x320 <__fixunssfsi+0x3e>
 2f4:	e1 f0       	breq	.+56     	; 0x32e <__fixunssfsi+0x4c>
 2f6:	66 0f       	add	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	88 1f       	adc	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	1a f0       	brmi	.+6      	; 0x306 <__fixunssfsi+0x24>
 300:	ba 95       	dec	r27
 302:	c9 f7       	brne	.-14     	; 0x2f6 <__fixunssfsi+0x14>
 304:	14 c0       	rjmp	.+40     	; 0x32e <__fixunssfsi+0x4c>
 306:	b1 30       	cpi	r27, 0x01	; 1
 308:	91 f0       	breq	.+36     	; 0x32e <__fixunssfsi+0x4c>
 30a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fp_zero>
 30e:	b1 e0       	ldi	r27, 0x01	; 1
 310:	08 95       	ret
 312:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__fp_zero>
 316:	67 2f       	mov	r22, r23
 318:	78 2f       	mov	r23, r24
 31a:	88 27       	eor	r24, r24
 31c:	b8 5f       	subi	r27, 0xF8	; 248
 31e:	39 f0       	breq	.+14     	; 0x32e <__fixunssfsi+0x4c>
 320:	b9 3f       	cpi	r27, 0xF9	; 249
 322:	cc f3       	brlt	.-14     	; 0x316 <__fixunssfsi+0x34>
 324:	86 95       	lsr	r24
 326:	77 95       	ror	r23
 328:	67 95       	ror	r22
 32a:	b3 95       	inc	r27
 32c:	d9 f7       	brne	.-10     	; 0x324 <__fixunssfsi+0x42>
 32e:	3e f4       	brtc	.+14     	; 0x33e <__fixunssfsi+0x5c>
 330:	90 95       	com	r25
 332:	80 95       	com	r24
 334:	70 95       	com	r23
 336:	61 95       	neg	r22
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	8f 4f       	sbci	r24, 0xFF	; 255
 33c:	9f 4f       	sbci	r25, 0xFF	; 255
 33e:	08 95       	ret

00000340 <__fp_inf>:
 340:	97 f9       	bld	r25, 7
 342:	9f 67       	ori	r25, 0x7F	; 127
 344:	80 e8       	ldi	r24, 0x80	; 128
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	08 95       	ret

0000034c <__fp_nan>:
 34c:	9f ef       	ldi	r25, 0xFF	; 255
 34e:	80 ec       	ldi	r24, 0xC0	; 192
 350:	08 95       	ret

00000352 <__fp_pscA>:
 352:	00 24       	eor	r0, r0
 354:	0a 94       	dec	r0
 356:	16 16       	cp	r1, r22
 358:	17 06       	cpc	r1, r23
 35a:	18 06       	cpc	r1, r24
 35c:	09 06       	cpc	r0, r25
 35e:	08 95       	ret

00000360 <__fp_pscB>:
 360:	00 24       	eor	r0, r0
 362:	0a 94       	dec	r0
 364:	12 16       	cp	r1, r18
 366:	13 06       	cpc	r1, r19
 368:	14 06       	cpc	r1, r20
 36a:	05 06       	cpc	r0, r21
 36c:	08 95       	ret

0000036e <__fp_round>:
 36e:	09 2e       	mov	r0, r25
 370:	03 94       	inc	r0
 372:	00 0c       	add	r0, r0
 374:	11 f4       	brne	.+4      	; 0x37a <__fp_round+0xc>
 376:	88 23       	and	r24, r24
 378:	52 f0       	brmi	.+20     	; 0x38e <__fp_round+0x20>
 37a:	bb 0f       	add	r27, r27
 37c:	40 f4       	brcc	.+16     	; 0x38e <__fp_round+0x20>
 37e:	bf 2b       	or	r27, r31
 380:	11 f4       	brne	.+4      	; 0x386 <__fp_round+0x18>
 382:	60 ff       	sbrs	r22, 0
 384:	04 c0       	rjmp	.+8      	; 0x38e <__fp_round+0x20>
 386:	6f 5f       	subi	r22, 0xFF	; 255
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	8f 4f       	sbci	r24, 0xFF	; 255
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	08 95       	ret

00000390 <__fp_split3>:
 390:	57 fd       	sbrc	r21, 7
 392:	90 58       	subi	r25, 0x80	; 128
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	59 f0       	breq	.+22     	; 0x3b0 <__fp_splitA+0x10>
 39a:	5f 3f       	cpi	r21, 0xFF	; 255
 39c:	71 f0       	breq	.+28     	; 0x3ba <__fp_splitA+0x1a>
 39e:	47 95       	ror	r20

000003a0 <__fp_splitA>:
 3a0:	88 0f       	add	r24, r24
 3a2:	97 fb       	bst	r25, 7
 3a4:	99 1f       	adc	r25, r25
 3a6:	61 f0       	breq	.+24     	; 0x3c0 <__fp_splitA+0x20>
 3a8:	9f 3f       	cpi	r25, 0xFF	; 255
 3aa:	79 f0       	breq	.+30     	; 0x3ca <__fp_splitA+0x2a>
 3ac:	87 95       	ror	r24
 3ae:	08 95       	ret
 3b0:	12 16       	cp	r1, r18
 3b2:	13 06       	cpc	r1, r19
 3b4:	14 06       	cpc	r1, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	f2 cf       	rjmp	.-28     	; 0x39e <__fp_split3+0xe>
 3ba:	46 95       	lsr	r20
 3bc:	f1 df       	rcall	.-30     	; 0x3a0 <__fp_splitA>
 3be:	08 c0       	rjmp	.+16     	; 0x3d0 <__fp_splitA+0x30>
 3c0:	16 16       	cp	r1, r22
 3c2:	17 06       	cpc	r1, r23
 3c4:	18 06       	cpc	r1, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	f1 cf       	rjmp	.-30     	; 0x3ac <__fp_splitA+0xc>
 3ca:	86 95       	lsr	r24
 3cc:	71 05       	cpc	r23, r1
 3ce:	61 05       	cpc	r22, r1
 3d0:	08 94       	sec
 3d2:	08 95       	ret

000003d4 <__fp_zero>:
 3d4:	e8 94       	clt

000003d6 <__fp_szero>:
 3d6:	bb 27       	eor	r27, r27
 3d8:	66 27       	eor	r22, r22
 3da:	77 27       	eor	r23, r23
 3dc:	cb 01       	movw	r24, r22
 3de:	97 f9       	bld	r25, 7
 3e0:	08 95       	ret

000003e2 <__mulsf3>:
 3e2:	0e 94 04 02 	call	0x408	; 0x408 <__mulsf3x>
 3e6:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_round>
 3ea:	0e 94 a9 01 	call	0x352	; 0x352 <__fp_pscA>
 3ee:	38 f0       	brcs	.+14     	; 0x3fe <__mulsf3+0x1c>
 3f0:	0e 94 b0 01 	call	0x360	; 0x360 <__fp_pscB>
 3f4:	20 f0       	brcs	.+8      	; 0x3fe <__mulsf3+0x1c>
 3f6:	95 23       	and	r25, r21
 3f8:	11 f0       	breq	.+4      	; 0x3fe <__mulsf3+0x1c>
 3fa:	0c 94 a0 01 	jmp	0x340	; 0x340 <__fp_inf>
 3fe:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__fp_nan>
 402:	11 24       	eor	r1, r1
 404:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_szero>

00000408 <__mulsf3x>:
 408:	0e 94 c8 01 	call	0x390	; 0x390 <__fp_split3>
 40c:	70 f3       	brcs	.-36     	; 0x3ea <__mulsf3+0x8>

0000040e <__mulsf3_pse>:
 40e:	95 9f       	mul	r25, r21
 410:	c1 f3       	breq	.-16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 412:	95 0f       	add	r25, r21
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	55 1f       	adc	r21, r21
 418:	62 9f       	mul	r22, r18
 41a:	f0 01       	movw	r30, r0
 41c:	72 9f       	mul	r23, r18
 41e:	bb 27       	eor	r27, r27
 420:	f0 0d       	add	r31, r0
 422:	b1 1d       	adc	r27, r1
 424:	63 9f       	mul	r22, r19
 426:	aa 27       	eor	r26, r26
 428:	f0 0d       	add	r31, r0
 42a:	b1 1d       	adc	r27, r1
 42c:	aa 1f       	adc	r26, r26
 42e:	64 9f       	mul	r22, r20
 430:	66 27       	eor	r22, r22
 432:	b0 0d       	add	r27, r0
 434:	a1 1d       	adc	r26, r1
 436:	66 1f       	adc	r22, r22
 438:	82 9f       	mul	r24, r18
 43a:	22 27       	eor	r18, r18
 43c:	b0 0d       	add	r27, r0
 43e:	a1 1d       	adc	r26, r1
 440:	62 1f       	adc	r22, r18
 442:	73 9f       	mul	r23, r19
 444:	b0 0d       	add	r27, r0
 446:	a1 1d       	adc	r26, r1
 448:	62 1f       	adc	r22, r18
 44a:	83 9f       	mul	r24, r19
 44c:	a0 0d       	add	r26, r0
 44e:	61 1d       	adc	r22, r1
 450:	22 1f       	adc	r18, r18
 452:	74 9f       	mul	r23, r20
 454:	33 27       	eor	r19, r19
 456:	a0 0d       	add	r26, r0
 458:	61 1d       	adc	r22, r1
 45a:	23 1f       	adc	r18, r19
 45c:	84 9f       	mul	r24, r20
 45e:	60 0d       	add	r22, r0
 460:	21 1d       	adc	r18, r1
 462:	82 2f       	mov	r24, r18
 464:	76 2f       	mov	r23, r22
 466:	6a 2f       	mov	r22, r26
 468:	11 24       	eor	r1, r1
 46a:	9f 57       	subi	r25, 0x7F	; 127
 46c:	50 40       	sbci	r21, 0x00	; 0
 46e:	9a f0       	brmi	.+38     	; 0x496 <__mulsf3_pse+0x88>
 470:	f1 f0       	breq	.+60     	; 0x4ae <__mulsf3_pse+0xa0>
 472:	88 23       	and	r24, r24
 474:	4a f0       	brmi	.+18     	; 0x488 <__mulsf3_pse+0x7a>
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	bb 1f       	adc	r27, r27
 47c:	66 1f       	adc	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	91 50       	subi	r25, 0x01	; 1
 484:	50 40       	sbci	r21, 0x00	; 0
 486:	a9 f7       	brne	.-22     	; 0x472 <__mulsf3_pse+0x64>
 488:	9e 3f       	cpi	r25, 0xFE	; 254
 48a:	51 05       	cpc	r21, r1
 48c:	80 f0       	brcs	.+32     	; 0x4ae <__mulsf3_pse+0xa0>
 48e:	0c 94 a0 01 	jmp	0x340	; 0x340 <__fp_inf>
 492:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_szero>
 496:	5f 3f       	cpi	r21, 0xFF	; 255
 498:	e4 f3       	brlt	.-8      	; 0x492 <__mulsf3_pse+0x84>
 49a:	98 3e       	cpi	r25, 0xE8	; 232
 49c:	d4 f3       	brlt	.-12     	; 0x492 <__mulsf3_pse+0x84>
 49e:	86 95       	lsr	r24
 4a0:	77 95       	ror	r23
 4a2:	67 95       	ror	r22
 4a4:	b7 95       	ror	r27
 4a6:	f7 95       	ror	r31
 4a8:	e7 95       	ror	r30
 4aa:	9f 5f       	subi	r25, 0xFF	; 255
 4ac:	c1 f7       	brne	.-16     	; 0x49e <__mulsf3_pse+0x90>
 4ae:	fe 2b       	or	r31, r30
 4b0:	88 0f       	add	r24, r24
 4b2:	91 1d       	adc	r25, r1
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	97 f9       	bld	r25, 7
 4ba:	08 95       	ret

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
